{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap be96e192894739a21c61","webpack:///./src/main.js","webpack:///./src/console-polyfill.js","webpack:///./src/store.js","webpack:///./~/immutable/dist/immutable.js","webpack:///./src/utils.js","webpack:///./src/immutable-helpers.js","webpack:///./src/reactor.js","webpack:///./src/create-react-mixin.js","webpack:///./src/reactor/fns.js","webpack:///./src/reactor/cache.js","webpack:///./src/getter.js","webpack:///./src/key-path.js","webpack:///./src/logging.js","webpack:///./src/reactor/records.js"],"names":[],"mappings":"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AoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,8CAA6C,wBAAwB;AACrE;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA,aAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oCAAmC,KAAK;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;;;AAKA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;;AAEA;AACA;AACA,oFAAmF,yCAAyC;AAC5H;AACA;AACA,kFAAiF,yCAAyC;AAC1H;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA2D;AAC3D;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA,4CAA2C;;AAE3C,8CAA6C;;AAE7C,0CAAyC;;;AAGzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAgB;AAChB,iBAAgB;AAChB;AACA;AACA;AACA,8EAA6E;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+BAA8B,SAAS;AACvC;AACA,MAAK;AACL;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,qBAAqB;AAC7D,UAAS;AACT;;AAEA,0BAAyB;AACzB;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA,oCAAmC,KAAK;AACxC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA0D,SAAS;AACnE;;AAEA;AACA;AACA;;AAEA;AACA,kDAAiD,eAAe;AAChE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iDAAgD;AAChD;AACA;;AAEA,gDAA+C;AAC/C;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qDAAoD;AACpD;AACA;;AAEA,oDAAmD;AACnD;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sDAAqD;AACrD;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA,oDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAiD,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,uCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,UAAS;AACT;AACA;AACA;AACA,uBAAsB,mBAAmB;AACzC;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,aAAa;AACjC;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,sBAAsB;AAC5D,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAwB,oBAAoB;AAC5C;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAwB,oBAAoB;AAC5C;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,kDAAiD;AACjD;AACA;;AAEA;AACA;AACA;;AAEA,sDAAqD;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,qBAAqB;AAC7D,UAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,2CAA0C,KAAK;AAC/C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6DAA4D;AAC5D;AACA,2BAA0B,+CAA+C;AACzE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA,sDAAqD,wCAAwC;AAC7F,6DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qDAAoD;AACpD;AACA;AACA,kDAAiD;AACjD;AACA;AACA;;AAEA,gEAA+D;AAC/D;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;;AAEA,kEAAiE;AACjE;AACA;AACA;AACA,4BAA2B,wBAAwB;AACnD;AACA,2BAA0B,4CAA4C;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oEAAmE;AACnE;AACA,iDAAgD,mCAAmC;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gEAA+D;AAC/D,iDAAgD,wBAAwB;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA,2DAA0D;AAC1D,4CAA2C;AAC3C;AACA;AACA,wCAAuC;AACvC,6CAA4C;AAC5C;AACA,8DAA6D;AAC7D,kDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA,6BAA4B,8DAA8D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP,mDAAkD;AAClD;AACA,0DAAyD;AACzD,kDAAiD,wBAAwB;AACzE;AACA;AACA,iCAAgC;AAChC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,MAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,MAAK;AACL;AACA,uCAAsC,oCAAoC;AAC1E;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;;AAEA;AACA;;;AAGA;AACA;AACA,6DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,MAAK,uBAAuB,oBAAoB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;;;AAGA;AACA;AACA;AACA,mEAAkE;AAClE;AACA;AACA,UAAS;AACT,+CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA,mCAAkC,6CAA6C;AAC/E;AACA,wBAAuB,uBAAuB,EAAE;AAChD,wBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,mCAAmC;AACjE,kCAAiC,kDAAkD;AACnF;AACA,MAAK;AACL,+CAA8C,4CAA4C;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,8DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,gBAAgB;AAC9D,6CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,eAAe;AACpE;AACA,QAAO;AACP;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oDAAmD,KAAK;AACxD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4DAA2D;AAC3D,sEAAqE,qBAAqB;AAC1F;;AAEA,yDAAwD;AACxD,sEAAqE,qBAAqB;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,kBAAkB;AACvD,UAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oCAAmC,KAAK;AACxC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uCAAsC;AACtC,0CAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,mBAAmB;AAC3C,4DAA2D,sBAAsB;AACjF;AACA,QAAO;AACP;;AAEA,2CAA0C;AAC1C;AACA;AACA;AACA,0CAAyC,yBAAyB;AAClE;AACA;AACA;AACA,6CAA4C,4BAA4B;AACxE;AACA;AACA,UAAS;AACT,QAAO;AACP;;AAEA,0CAAyC;AACzC;AACA;AACA;AACA,0CAAyC,yBAAyB;AAClE;AACA;AACA;AACA,2CAA0C,4BAA4B;AACtE;AACA;AACA,UAAS;AACT,QAAO;AACP;;AAEA;AACA;AACA;;AAEA,iDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sDAAqD;AACrD,mDAAkD,wBAAwB;AAC1E;;AAEA;AACA,6CAA4C,SAAS;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,kBAAkB;AACvD,UAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2CAA0C,KAAK;AAC/C;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kDAAiD,cAAc,EAAE;AACjE;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,2BAA0B;AAC1B;AACA,MAAK;;AAEL;AACA;AACA,2BAA0B;AAC1B;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,uCAAsC,eAAe,EAAE;AACvD;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;;AAEA,yBAAwB;AACxB;AACA,MAAK;;AAEL;AACA,0CAAyC,8BAA8B;AACvE,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA,MAAK;;AAEL;AACA,kFAAiF,YAAY;AAC7F,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD;AAClD;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA,2CAA0C,0BAA0B;AACpE,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,2CAA0C,4BAA4B;AACtE,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA,6CAA4C,8BAA8B;AAC1E,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,wBAAwB;AACnE;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL,4CAA2C;AAC3C;AACA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA,MAAK;;AAEL,yCAAwC;AACxC;AACA;AACA,4BAA2B;AAC3B;AACA;AACA;;AAEA,IAAG;;AAEH;AACA;AACA;AACA;AACA,8DAA6D;;;;AAI7D;;AAEA;;AAEA;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,sCAAqC,qBAAqB;AAC1D,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,IAAG;;AAEH;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA;;AAEA,IAAG;;AAEH;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,8CAA8C,EAAE;AAC3E,4BAA2B,yCAAyC,EAAE;AACtE;AACA,yBAAwB,0BAA0B,EAAE;AACpD,yBAAwB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","file":"./dist/nuclear.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Nuclear\"] = factory();\n\telse\n\t\troot[\"Nuclear\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap be96e192894739a21c61\n **/","import './console-polyfill'\nimport Store from './store'\nimport Reactor from './reactor'\nimport Immutable from 'immutable'\nimport { toJS, toImmutable, isImmutable } from './immutable-helpers'\nimport { isKeyPath } from './key-path'\nimport { isGetter } from './getter'\nimport { LRUCache } from './reactor/cache'\nimport createReactMixin from './create-react-mixin'\n\nexport default {\n  Reactor,\n  Store,\n  Immutable,\n  isKeyPath,\n  isGetter,\n  toJS,\n  toImmutable,\n  isImmutable,\n  createReactMixin,\n  LRUCache,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main.js\n **/","try {\n  /* eslint-disable no-console */\n  if (!(window.console && console.log)) {\n  /* eslint-enable no-console */\n    console = {\n      log: function() {},\n      debug: function() {},\n      info: function() {},\n      warn: function() {},\n      error: function() {},\n    }\n  }\n} catch(e) {\n  // ignored\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/console-polyfill.js\n **/","import { Map } from 'immutable'\nimport { toFactory, extend } from './utils'\nimport { toJS, toImmutable } from './immutable-helpers'\n\n/**\n * Stores define how a certain domain of the application should respond to actions\n * taken on the whole system.  They manage their own section of the entire app state\n * and have no knowledge about the other parts of the application state.\n */\nclass Store {\n  constructor(config) {\n    this.__handlers = Map({})\n\n    if (config) {\n      // allow `MyStore extends Store` syntax without throwing error\n      extend(this, config)\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * This method is overridden by extending classes to setup message handlers\n   * via `this.on` and to set up the initial state\n   *\n   * Anything returned from this function will be coerced into an ImmutableJS value\n   * and set as the initial state for the part of the ReactorCore\n   */\n  initialize() {\n    // extending classes implement to setup action handlers\n  }\n\n  /**\n   * Overridable method to get the initial state for this type of store\n   */\n  getInitialState() {\n    return Map()\n  }\n\n  /**\n   * Takes a current reactor state, action type and payload\n   * does the reaction and returns the new state\n   */\n  handle(state, type, payload) {\n    const handler = this.__handlers.get(type)\n\n    if (typeof handler === 'function') {\n      return handler.call(this, state, payload, type)\n    }\n\n    return state\n  }\n\n  /**\n   * Pure function taking the current state of store and returning\n   * the new state after a NuclearJS reactor has been reset\n   *\n   * Overridable\n   */\n  handleReset(state) {\n    return this.getInitialState()\n  }\n\n  /**\n   * Binds an action type => handler\n   */\n  on(actionType, handler) {\n    this.__handlers = this.__handlers.set(actionType, handler)\n  }\n\n  /**\n   * Serializes store state to plain JSON serializable JavaScript\n   * Overridable\n   * @param {*}\n   * @return {*}\n   */\n  serialize(state) {\n    return toJS(state)\n  }\n\n  /**\n   * Deserializes plain JavaScript to store state\n   * Overridable\n   * @param {*}\n   * @return {*}\n   */\n  deserialize(state) {\n    return toImmutable(state)\n  }\n}\n\nexport function isStore(toTest) {\n  return (toTest instanceof Store)\n}\n\nexport default toFactory(Store)\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/store.js\n **/","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/immutable/dist/immutable.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * Checks if the passed in value is a string\n * @param {*} val\n * @return {boolean}\n */\nexports.isString = function(val) {\n  return typeof val === 'string' || objectToString(val) === '[object String]'\n}\n\n/**\n * Checks if the passed in value is an array\n * @param {*} val\n * @return {boolean}\n */\nexports.isArray = Array.isArray /* istanbul ignore next */|| function(val) {\n  return objectToString(val) === '[object Array]'\n}\n\n// taken from underscore source to account for browser discrepancy\n/* istanbul ignore if  */\nif (typeof /./ !== 'function' && typeof Int8Array !== 'object') {\n  /**\n   * Checks if the passed in value is a function\n   * @param {*} val\n   * @return {boolean}\n   */\n  exports.isFunction = function(obj) {\n    return typeof obj === 'function' || false\n  }\n} else {\n  /**\n   * Checks if the passed in value is a function\n   * @param {*} val\n   * @return {boolean}\n   */\n  exports.isFunction = function(val) {\n    return toString.call(val) === '[object Function]'\n  }\n}\n\n/**\n * Checks if the passed in value is of type Object\n * @param {*} val\n * @return {boolean}\n */\nexports.isObject = function(obj) {\n  var type = typeof obj\n  return type === 'function' || type === 'object' && !!obj\n}\n\n/**\n * Extends an object with the properties of additional objects\n * @param {object} obj\n * @param {object} objects\n * @return {object}\n */\nexports.extend = function(obj) {\n  var length = arguments.length\n\n  if (!obj || length < 2) {\n    return obj || {}\n  }\n\n  for (var index = 1; index < length; index++) {\n    var source = arguments[index]\n    var keys = Object.keys(source)\n    var l = keys.length\n\n    for (var i = 0; i < l; i++) {\n      var key = keys[i]\n      obj[key] = source[key]\n    }\n  }\n\n  return obj\n}\n\n/**\n * Creates a shallow clone of an object\n * @param {object} obj\n * @return {object}\n */\nexports.clone = function(obj) {\n  if (!exports.isObject(obj)) {\n    return obj\n  }\n  return exports.isArray(obj) ? obj.slice() : exports.extend({}, obj)\n}\n\n/**\n * Iterates over a collection of elements yielding each iteration to an\n * iteratee. The iteratee may be bound to the context argument and is invoked\n * each time with three arguments (value, index|key, collection). Iteration may\n * be exited early by explicitly returning false.\n * @param {array|object|string} collection\n * @param {function} iteratee\n * @param {*} context\n * @return {array|object|string}\n */\nexports.each = function(collection, iteratee, context) {\n  var length = collection ? collection.length : 0\n  var i = -1\n  var keys\n  var origIteratee\n\n  if (context) {\n    origIteratee = iteratee\n    iteratee = function(value, index, innerCollection) {\n      return origIteratee.call(context, value, index, innerCollection)\n    }\n  }\n\n  if (isLength(length)) {\n    while (++i < length) {\n      if (iteratee(collection[i], i, collection) === false) {\n        break\n      }\n    }\n  } else {\n    keys = Object.keys(collection)\n    length = keys.length\n    while (++i < length) {\n      if (iteratee(collection[keys[i]], keys[i], collection) === false) {\n        break\n      }\n    }\n  }\n\n  return collection\n}\n\n/**\n * Returns a new function the invokes `func` with `partialArgs` prepended to\n * any passed into the new function. Acts like `Array.prototype.bind`, except\n * it does not alter `this` context.\n * @param {function} func\n * @param {*} partialArgs\n * @return {function}\n */\nexports.partial = function(func) {\n  var slice = Array.prototype.slice\n  var partialArgs = slice.call(arguments, 1)\n\n  return function() {\n    return func.apply(this, partialArgs.concat(slice.call(arguments)))\n  }\n}\n\n/**\n * Returns a factory method that allows construction with or without `new`\n */\nexports.toFactory = function(Klass) {\n  var Factory = function(...args) {\n    return new Klass(...args)\n  }\n\n  Factory.__proto__ = Klass // eslint-disable-line no-proto\n  Factory.prototype = Klass.prototype\n  return Factory\n}\n\n/**\n * Returns the text value representation of an object\n * @private\n * @param {*} obj\n * @return {string}\n */\nfunction objectToString(obj) {\n  return obj && typeof obj === 'object' && toString.call(obj)\n}\n\n/**\n * Checks if the value is a valid array-like length.\n * @private\n * @param {*} val\n * @return {bool}\n */\nfunction isLength(val) {\n  return typeof val === 'number'\n    && val > -1\n    && val % 1 === 0\n    && val <= Number.MAX_VALUE\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","import Immutable from 'immutable'\nimport { isObject } from './utils'\n\n/**\n * A collection of helpers for the ImmutableJS library\n */\n\n/**\n * @param {*} obj\n * @return {boolean}\n */\nexport function isImmutable(obj) {\n  return Immutable.Iterable.isIterable(obj)\n}\n\n/**\n * Returns true if the value is an ImmutableJS data structure\n * or a JavaScript primitive that is immutable (string, number, etc)\n * @param {*} obj\n * @return {boolean}\n */\nexport function isImmutableValue(obj) {\n  return (\n    isImmutable(obj) ||\n    !isObject(obj)\n  )\n}\n\n/**\n * Converts an Immutable Sequence to JS object\n * Can be called on any type\n */\nexport function toJS(arg) {\n  // arg instanceof Immutable.Sequence is unreliable\n  return (isImmutable(arg))\n    ? arg.toJS()\n    : arg\n}\n\n/**\n * Converts a JS object to an Immutable object, if it's\n * already Immutable its a no-op\n */\nexport function toImmutable(arg) {\n  return (isImmutable(arg))\n    ? arg\n    : Immutable.fromJS(arg)\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/immutable-helpers.js\n **/","import Immutable from 'immutable'\nimport createReactMixin from './create-react-mixin'\nimport * as fns from './reactor/fns'\nimport { DefaultCache } from './reactor/cache'\nimport { NoopLogger, ConsoleGroupLogger } from './logging'\nimport { isKeyPath } from './key-path'\nimport { isGetter } from './getter'\nimport { toJS } from './immutable-helpers'\nimport { extend, toFactory } from './utils'\nimport {\n  ReactorState,\n  ObserverState,\n  DEBUG_OPTIONS,\n  PROD_OPTIONS,\n} from './reactor/records'\n\n/**\n * State is stored in NuclearJS Reactors.  Reactors\n * contain a 'state' object which is an Immutable.Map\n *\n * The only way Reactors can change state is by reacting to\n * messages.  To update state, Reactor's dispatch messages to\n * all registered cores, and the core returns it's new\n * state based on the message\n */\nclass Reactor {\n  constructor(config = {}) {\n    const debug = !!config.debug\n    const baseOptions = debug ? DEBUG_OPTIONS : PROD_OPTIONS\n    // if defined, merge the custom implementation over the noop logger to avoid undefined lookups,\n    // otherwise, just use the built-in console group logger\n    let logger = config.logger ? extend({}, NoopLogger, config.logger) : NoopLogger\n    if (!config.logger && debug) {\n      logger = ConsoleGroupLogger\n    }\n    const initialReactorState = new ReactorState({\n      debug: debug,\n      cache: config.cache || DefaultCache(),\n      logger: logger,\n      // merge config options with the defaults\n      options: baseOptions.merge(config.options || {}),\n    })\n\n    this.prevReactorState = initialReactorState\n    this.reactorState = initialReactorState\n    this.observerState = new ObserverState()\n\n    this.ReactMixin = createReactMixin(this)\n\n    // keep track of the depth of batch nesting\n    this.__batchDepth = 0\n\n    // keep track if we are currently dispatching\n    this.__isDispatching = false\n  }\n\n  /**\n   * Evaluates a KeyPath or Getter in context of the reactor state\n   * @param {KeyPath|Getter} keyPathOrGetter\n   * @return {*}\n   */\n  evaluate(keyPathOrGetter) {\n    let { result, reactorState } = fns.evaluate(this.reactorState, keyPathOrGetter)\n    this.reactorState = reactorState\n    return result\n  }\n\n  /**\n   * Gets the coerced state (to JS object) of the reactor.evaluate\n   * @param {KeyPath|Getter} keyPathOrGetter\n   * @return {*}\n   */\n  evaluateToJS(keyPathOrGetter) {\n    return toJS(this.evaluate(keyPathOrGetter))\n  }\n\n  /**\n   * Adds a change observer whenever a certain part of the reactor state changes\n   *\n   * 1. observe(handlerFn) - 1 argument, called anytime reactor.state changes\n   * 2. observe(keyPath, handlerFn) same as above\n   * 3. observe(getter, handlerFn) called whenever any getter dependencies change with\n   *    the value of the getter\n   *\n   * Adds a change handler whenever certain deps change\n   * If only one argument is passed invoked the handler whenever\n   * the reactor state changes\n   *\n   * @param {KeyPath|Getter} getter\n   * @param {function} handler\n   * @return {function} unwatch function\n   */\n  observe(getter, handler) {\n    if (arguments.length === 1) {\n      handler = getter\n      getter = []\n    }\n    let { observerState, entry } = fns.addObserver(this.observerState, getter, handler)\n    this.observerState = observerState\n    return () => {\n      this.observerState = fns.removeObserverByEntry(this.observerState, entry)\n    }\n  }\n\n  unobserve(getter, handler) {\n    if (arguments.length === 0) {\n      throw new Error('Must call unobserve with a Getter')\n    }\n    if (!isGetter(getter) && !isKeyPath(getter)) {\n      throw new Error('Must call unobserve with a Getter')\n    }\n\n    this.observerState = fns.removeObserver(this.observerState, getter, handler)\n  }\n\n  /**\n   * Dispatches a single message\n   * @param {string} actionType\n   * @param {object|undefined} payload\n   */\n  dispatch(actionType, payload) {\n    if (this.__batchDepth === 0) {\n      if (fns.getOption(this.reactorState, 'throwOnDispatchInDispatch')) {\n        if (this.__isDispatching) {\n          this.__isDispatching = false\n          throw new Error('Dispatch may not be called while a dispatch is in progress')\n        }\n      }\n      this.__isDispatching = true\n    }\n\n    try {\n      this.reactorState = fns.dispatch(this.reactorState, actionType, payload)\n    } catch (e) {\n      this.__isDispatching = false\n      throw e\n    }\n\n    try {\n      this.__notify()\n    } finally {\n      this.__isDispatching = false\n    }\n  }\n\n  /**\n   * Allows batching of dispatches before notifying change observers\n   * @param {Function} fn\n   */\n  batch(fn) {\n    this.batchStart()\n    fn()\n    this.batchEnd()\n  }\n\n  /**\n   * @deprecated\n   * @param {String} id\n   * @param {Store} store\n   */\n  registerStore(id, store) {\n    /* eslint-disable no-console */\n    console.warn('Deprecation warning: `registerStore` will no longer be supported in 1.1, use `registerStores` instead')\n    /* eslint-enable no-console */\n    this.registerStores({\n      [id]: store,\n    })\n  }\n\n  /**\n   * @param {Object} stores\n   */\n  registerStores(stores) {\n    this.reactorState = fns.registerStores(this.reactorState, stores)\n    this.__notify()\n  }\n\n  /**\n   * Replace store implementation (handlers) without modifying the app state or calling getInitialState\n   * Useful for hot reloading\n   * @param {Object} stores\n   */\n  replaceStores(stores) {\n    this.reactorState = fns.replaceStores(this.reactorState, stores)\n  }\n\n  /**\n   * Returns a plain object representing the application state\n   * @return {Object}\n   */\n  serialize() {\n    return fns.serialize(this.reactorState)\n  }\n\n  /**\n   * @param {Object} state\n   */\n  loadState(state) {\n    this.reactorState = fns.loadState(this.reactorState, state)\n    this.__notify()\n  }\n\n  /**\n   * Resets the state of a reactor and returns back to initial state\n   */\n  reset() {\n    const newState = fns.reset(this.reactorState)\n    this.reactorState = newState\n    this.prevReactorState = newState\n    this.observerState = new ObserverState()\n  }\n\n  /**\n   * Notifies all change observers with the current state\n   * @private\n   */\n  __notify() {\n    if (this.__batchDepth > 0) {\n      // in the middle of batch, dont notify\n      return\n    }\n\n    const dirtyStores = this.reactorState.get('dirtyStores')\n    if (dirtyStores.size === 0) {\n      return\n    }\n\n    let observerIdsToNotify = Immutable.Set().withMutations(set => {\n      // notify all observers\n      set.union(this.observerState.get('any'))\n\n      dirtyStores.forEach(id => {\n        const entries = this.observerState.getIn(['stores', id])\n        if (!entries) {\n          return\n        }\n        set.union(entries)\n      })\n    })\n\n    observerIdsToNotify.forEach((observerId) => {\n      const entry = this.observerState.getIn(['observersMap', observerId])\n      if (!entry) {\n        // don't notify here in the case a handler called unobserve on another observer\n        return\n      }\n\n      const getter = entry.get('getter')\n      const handler = entry.get('handler')\n\n      const prevEvaluateResult = fns.evaluate(this.prevReactorState, getter)\n      const currEvaluateResult = fns.evaluate(this.reactorState, getter)\n\n      this.prevReactorState = prevEvaluateResult.reactorState\n      this.reactorState = currEvaluateResult.reactorState\n\n      const prevValue = prevEvaluateResult.result\n      const currValue = currEvaluateResult.result\n\n      if (!Immutable.is(prevValue, currValue)) {\n        handler.call(null, currValue)\n      }\n    })\n\n    const nextReactorState = fns.resetDirtyStores(this.reactorState)\n\n    this.prevReactorState = nextReactorState\n    this.reactorState = nextReactorState\n  }\n\n  /**\n   * Starts batching, ie pausing notifies and batching up changes\n   * to be notified when batchEnd() is called\n   */\n  batchStart() {\n    this.__batchDepth++\n  }\n\n  /**\n   * Ends a batch cycle and will notify obsevers of all changes if\n   * the batch depth is back to 0 (outer most batch completed)\n   */\n  batchEnd() {\n    this.__batchDepth--\n\n    if (this.__batchDepth <= 0) {\n      // set to true to catch if dispatch called from observer\n      this.__isDispatching = true\n      try {\n        this.__notify()\n      } catch (e) {\n        this.__isDispatching = false\n        throw e\n      }\n      this.__isDispatching = false\n    }\n  }\n}\n\nexport default toFactory(Reactor)\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/reactor.js\n **/","import { each } from './utils'\n\n/**\n * Returns a mapping of the getDataBinding keys to\n * the reactor values\n */\nfunction getState(reactor, data) {\n  let state = {}\n  each(data, (value, key) => {\n    state[key] = reactor.evaluate(value)\n  })\n  return state\n}\n\n/**\n * @param {Reactor} reactor\n */\nexport default function(reactor) {\n  return {\n    getInitialState() {\n      return getState(reactor, this.getDataBindings())\n    },\n\n    componentDidMount() {\n      this.__unwatchFns = []\n      each(this.getDataBindings(), (getter, key) => {\n        const unwatchFn = reactor.observe(getter, (val) => {\n          this.setState({\n            [key]: val,\n          })\n        })\n\n        this.__unwatchFns.push(unwatchFn)\n      })\n    },\n\n    componentWillUnmount() {\n      while (this.__unwatchFns.length) {\n        this.__unwatchFns.shift()()\n      }\n    },\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/create-react-mixin.js\n **/","import Immutable from 'immutable'\nimport { CacheEntry } from './cache'\nimport { isImmutableValue } from '../immutable-helpers'\nimport { toImmutable } from '../immutable-helpers'\nimport { fromKeyPath, getStoreDeps, getComputeFn, getDeps, isGetter } from '../getter'\nimport { isEqual, isKeyPath } from '../key-path'\nimport { each } from '../utils'\n\n/**\n * Immutable Types\n */\nconst EvaluateResult = Immutable.Record({ result: null, reactorState: null})\n\nfunction evaluateResult(result, reactorState) {\n  return new EvaluateResult({\n    result: result,\n    reactorState: reactorState,\n  })\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {Object<String, Store>} stores\n * @return {ReactorState}\n */\nexport function registerStores(reactorState, stores) {\n  return reactorState.withMutations((reactorState) => {\n    each(stores, (store, id) => {\n      if (reactorState.getIn(['stores', id])) {\n        /* eslint-disable no-console */\n        console.warn('Store already defined for id = ' + id)\n        /* eslint-enable no-console */\n      }\n\n      const initialState = store.getInitialState()\n\n      if (initialState === undefined && getOption(reactorState, 'throwOnUndefinedStoreReturnValue')) {\n        throw new Error('Store getInitialState() must return a value, did you forget a return statement')\n      }\n      if (getOption(reactorState, 'throwOnNonImmutableStore') && !isImmutableValue(initialState)) {\n        throw new Error('Store getInitialState() must return an immutable value, did you forget to call toImmutable')\n      }\n\n      reactorState\n        .update('stores', stores => stores.set(id, store))\n        .update('state', state => state.set(id, initialState))\n        .update('dirtyStores', state => state.add(id))\n        .update('storeStates', storeStates => incrementStoreStates(storeStates, [id]))\n    })\n    incrementId(reactorState)\n  })\n}\n\n/**\n * Overrides the store implementation without resetting the value of that particular part of the app state\n * this is useful when doing hot reloading of stores.\n * @param {ReactorState} reactorState\n * @param {Object<String, Store>} stores\n * @return {ReactorState}\n */\nexport function replaceStores(reactorState, stores) {\n  return reactorState.withMutations((reactorState) => {\n    each(stores, (store, id) => {\n      reactorState.update('stores', stores => stores.set(id, store))\n    })\n  })\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {String} actionType\n * @param {*} payload\n * @return {ReactorState}\n */\nexport function dispatch(reactorState, actionType, payload) {\n  let logging = reactorState.get('logger')\n\n  if (actionType === undefined && getOption(reactorState, 'throwOnUndefinedActionType')) {\n    throw new Error('`dispatch` cannot be called with an `undefined` action type.')\n  }\n\n  const currState = reactorState.get('state')\n  let dirtyStores = reactorState.get('dirtyStores')\n\n  const nextState = currState.withMutations(state => {\n    logging.dispatchStart(reactorState, actionType, payload)\n\n    // let each store handle the message\n    reactorState.get('stores').forEach((store, id) => {\n      const currState = state.get(id)\n      let newState\n\n      try {\n        newState = store.handle(currState, actionType, payload)\n      } catch(e) {\n        // ensure console.group is properly closed\n        logging.dispatchError(reactorState, e.message)\n        throw e\n      }\n\n      if (newState === undefined && getOption(reactorState, 'throwOnUndefinedStoreReturnValue')) {\n        const errorMsg = 'Store handler must return a value, did you forget a return statement'\n        logging.dispatchError(reactorState, errorMsg)\n        throw new Error(errorMsg)\n      }\n\n      state.set(id, newState)\n\n      if (currState !== newState) {\n        // if the store state changed add store to list of dirty stores\n        dirtyStores = dirtyStores.add(id)\n      }\n    })\n\n    logging.dispatchEnd(reactorState, state, dirtyStores, currState)\n  })\n\n  const nextReactorState = reactorState\n    .set('state', nextState)\n    .set('dirtyStores', dirtyStores)\n    .update('storeStates', storeStates => incrementStoreStates(storeStates, dirtyStores))\n\n  return incrementId(nextReactorState)\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {Immutable.Map} state\n * @return {ReactorState}\n */\nexport function loadState(reactorState, state) {\n  let dirtyStores = []\n  const stateToLoad = toImmutable({}).withMutations(stateToLoad => {\n    each(state, (serializedStoreState, storeId) => {\n      const store = reactorState.getIn(['stores', storeId])\n      if (store) {\n        const storeState = store.deserialize(serializedStoreState)\n        if (storeState !== undefined) {\n          stateToLoad.set(storeId, storeState)\n          dirtyStores.push(storeId)\n        }\n      }\n    })\n  })\n\n  const dirtyStoresSet = Immutable.Set(dirtyStores)\n  return reactorState\n    .update('state', state => state.merge(stateToLoad))\n    .update('dirtyStores', stores => stores.union(dirtyStoresSet))\n    .update('storeStates', storeStates => incrementStoreStates(storeStates, dirtyStores))\n}\n\n/**\n * Adds a change observer whenever a certain part of the reactor state changes\n *\n * 1. observe(handlerFn) - 1 argument, called anytime reactor.state changes\n * 2. observe(keyPath, handlerFn) same as above\n * 3. observe(getter, handlerFn) called whenever any getter dependencies change with\n *    the value of the getter\n *\n * Adds a change handler whenever certain deps change\n * If only one argument is passed invoked the handler whenever\n * the reactor state changes\n *\n * @param {ObserverState} observerState\n * @param {KeyPath|Getter} getter\n * @param {function} handler\n * @return {ObserveResult}\n */\nexport function addObserver(observerState, getter, handler) {\n  // use the passed in getter as the key so we can rely on a byreference call for unobserve\n  const getterKey = getter\n  if (isKeyPath(getter)) {\n    getter = fromKeyPath(getter)\n  }\n\n  const currId = observerState.get('nextId')\n  const storeDeps = getStoreDeps(getter)\n  const entry = Immutable.Map({\n    id: currId,\n    storeDeps: storeDeps,\n    getterKey: getterKey,\n    getter: getter,\n    handler: handler,\n  })\n\n  let updatedObserverState\n  if (storeDeps.size === 0) {\n    // no storeDeps means the observer is dependent on any of the state changing\n    updatedObserverState = observerState.update('any', observerIds => observerIds.add(currId))\n  } else {\n    updatedObserverState = observerState.withMutations(map => {\n      storeDeps.forEach(storeId => {\n        let path = ['stores', storeId]\n        if (!map.hasIn(path)) {\n          map.setIn(path, Immutable.Set())\n        }\n        map.updateIn(['stores', storeId], observerIds => observerIds.add(currId))\n      })\n    })\n  }\n\n  updatedObserverState = updatedObserverState\n    .set('nextId', currId + 1)\n    .setIn(['observersMap', currId], entry)\n\n  return {\n    observerState: updatedObserverState,\n    entry: entry,\n  }\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {String} option\n * @return {Boolean}\n */\nexport function getOption(reactorState, option) {\n  const value = reactorState.getIn(['options', option])\n  if (value === undefined) {\n    throw new Error('Invalid option: ' + option)\n  }\n  return value\n}\n\n/**\n * Use cases\n * removeObserver(observerState, [])\n * removeObserver(observerState, [], handler)\n * removeObserver(observerState, ['keyPath'])\n * removeObserver(observerState, ['keyPath'], handler)\n * removeObserver(observerState, getter)\n * removeObserver(observerState, getter, handler)\n * @param {ObserverState} observerState\n * @param {KeyPath|Getter} getter\n * @param {Function} handler\n * @return {ObserverState}\n */\nexport function removeObserver(observerState, getter, handler) {\n  const entriesToRemove = observerState.get('observersMap').filter(entry => {\n    // use the getterKey in the case of a keyPath is transformed to a getter in addObserver\n    let entryGetter = entry.get('getterKey')\n    let handlersMatch = (!handler || entry.get('handler') === handler)\n    if (!handlersMatch) {\n      return false\n    }\n    // check for a by-value equality of keypaths\n    if (isKeyPath(getter) && isKeyPath(entryGetter)) {\n      return isEqual(getter, entryGetter)\n    }\n    // we are comparing two getters do it by reference\n    return (getter === entryGetter)\n  })\n\n  return observerState.withMutations(map => {\n    entriesToRemove.forEach(entry => removeObserverByEntry(map, entry))\n  })\n}\n\n/**\n * Removes an observer entry by id from the observerState\n * @param {ObserverState} observerState\n * @param {Immutable.Map} entry\n * @return {ObserverState}\n */\nexport function removeObserverByEntry(observerState, entry) {\n  return observerState.withMutations(map => {\n    const id = entry.get('id')\n    const storeDeps = entry.get('storeDeps')\n\n    if (storeDeps.size === 0) {\n      map.update('any', anyObsevers => anyObsevers.remove(id))\n    } else {\n      storeDeps.forEach(storeId => {\n        map.updateIn(['stores', storeId], observers => {\n          if (observers) {\n            // check for observers being present because reactor.reset() can be called before an unwatch fn\n            return observers.remove(id)\n          }\n          return observers\n        })\n      })\n    }\n\n    map.removeIn(['observersMap', id])\n  })\n}\n\n/**\n * @param {ReactorState} reactorState\n * @return {ReactorState}\n */\nexport function reset(reactorState) {\n  const prevState = reactorState.get('state')\n\n  return reactorState.withMutations(reactorState => {\n    const storeMap = reactorState.get('stores')\n    const storeIds = storeMap.keySeq().toJS()\n    storeMap.forEach((store, id) => {\n      const storeState = prevState.get(id)\n      const resetStoreState = store.handleReset(storeState)\n      if (resetStoreState === undefined && getOption(reactorState, 'throwOnUndefinedStoreReturnValue')) {\n        throw new Error('Store handleReset() must return a value, did you forget a return statement')\n      }\n      if (getOption(reactorState, 'throwOnNonImmutableStore') && !isImmutableValue(resetStoreState)) {\n        throw new Error('Store reset state must be an immutable value, did you forget to call toImmutable')\n      }\n      reactorState.setIn(['state', id], resetStoreState)\n    })\n\n    reactorState.update('storeStates', storeStates => incrementStoreStates(storeStates, storeIds))\n    resetDirtyStores(reactorState)\n  })\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {KeyPath|Gettter} keyPathOrGetter\n * @return {EvaluateResult}\n */\nexport function evaluate(reactorState, keyPathOrGetter) {\n  const state = reactorState.get('state')\n\n  if (isKeyPath(keyPathOrGetter)) {\n    // if its a keyPath simply return\n    return evaluateResult(\n      state.getIn(keyPathOrGetter),\n      reactorState\n    )\n  } else if (!isGetter(keyPathOrGetter)) {\n    throw new Error('evaluate must be passed a keyPath or Getter')\n  }\n\n  // Must be a Getter\n\n  const cache = reactorState.get('cache')\n  var cacheEntry = cache.lookup(keyPathOrGetter)\n  const isCacheMiss = !cacheEntry || isDirtyCacheEntry(reactorState, cacheEntry)\n  if (isCacheMiss) {\n    cacheEntry = createCacheEntry(reactorState, keyPathOrGetter)\n  }\n\n  return evaluateResult(\n    cacheEntry.get('value'),\n    reactorState.update('cache', cache => {\n      return isCacheMiss ?\n        cache.miss(keyPathOrGetter, cacheEntry) :\n        cache.hit(keyPathOrGetter)\n    })\n  )\n}\n\n/**\n * Returns serialized state for all stores\n * @param {ReactorState} reactorState\n * @return {Object}\n */\nexport function serialize(reactorState) {\n  let serialized = {}\n  reactorState.get('stores').forEach((store, id) => {\n    let storeState = reactorState.getIn(['state', id])\n    let serializedState = store.serialize(storeState)\n    if (serializedState !== undefined) {\n      serialized[id] = serializedState\n    }\n  })\n  return serialized\n}\n\n/**\n * Returns serialized state for all stores\n * @param {ReactorState} reactorState\n * @return {ReactorState}\n */\nexport function resetDirtyStores(reactorState) {\n  return reactorState.set('dirtyStores', Immutable.Set())\n}\n\n/**\n * @param {ReactorState} reactorState\n * @param {CacheEntry} cacheEntry\n * @return {boolean}\n */\nfunction isDirtyCacheEntry(reactorState, cacheEntry) {\n  const storeStates = cacheEntry.get('storeStates')\n\n  // if there are no store states for this entry then it was never cached before\n  return !storeStates.size || storeStates.some((stateId, storeId) => {\n    return reactorState.getIn(['storeStates', storeId]) !== stateId\n  })\n}\n\n/**\n * Evaluates getter for given reactorState and returns CacheEntry\n * @param {ReactorState} reactorState\n * @param {Getter} getter\n * @return {CacheEntry}\n */\nfunction createCacheEntry(reactorState, getter) {\n  // evaluate dependencies\n  const args = getDeps(getter).map(dep => evaluate(reactorState, dep).result)\n  const value = getComputeFn(getter).apply(null, args)\n\n  const storeDeps = getStoreDeps(getter)\n  const storeStates = toImmutable({}).withMutations(map => {\n    storeDeps.forEach(storeId => {\n      const stateId = reactorState.getIn(['storeStates', storeId])\n      map.set(storeId, stateId)\n    })\n  })\n\n  return CacheEntry({\n    value: value,\n    storeStates: storeStates,\n    dispatchId: reactorState.get('dispatchId'),\n  })\n}\n\n/**\n * @param {ReactorState} reactorState\n * @return {ReactorState}\n */\nfunction incrementId(reactorState) {\n  return reactorState.update('dispatchId', id => id + 1)\n}\n\n\n/**\n * @param {Immutable.Map} storeStates\n * @param {Array} storeIds\n * @return {Immutable.Map}\n */\nfunction incrementStoreStates(storeStates, storeIds) {\n  return storeStates.withMutations(map => {\n    storeIds.forEach(id => {\n      const nextId = map.has(id) ? map.get(id) + 1 : 1\n      map.set(id, nextId)\n    })\n  })\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/reactor/fns.js\n **/","import { Map, OrderedSet, Record } from 'immutable'\n\nexport const CacheEntry = Record({\n  value: null,\n  storeStates: Map(),\n  dispatchId: null,\n})\n\n/*******************************************************************************\n * interface PersistentCache {\n *    has(item)\n *    lookup(item, notFoundValue)\n *    hit(item)\n *    miss(item, entry)\n *    evict(item)\n *    asMap()\n * }\n *\n * Inspired by clojure.core.cache/CacheProtocol\n *******************************************************************************/\n\n/**\n * Plain map-based cache\n */\nexport class BasicCache {\n\n  /**\n   * @param {Immutable.Map} cache\n   */\n  constructor(cache = Map()) {\n    this.cache = cache\n  }\n\n  /**\n   * Retrieve the associated value, if it exists in this cache, otherwise\n   * returns notFoundValue (or undefined if not provided)\n   * @param {Object} item\n   * @param {Object?} notFoundValue\n   * @return {CacheEntry?}\n   */\n  lookup(item, notFoundValue) {\n    return this.cache.get(item, notFoundValue)\n  }\n\n  /**\n   * Checks if this cache contains an associated value\n   * @param {Object} item\n   * @return {boolean}\n   */\n  has(item) {\n    return this.cache.has(item)\n  }\n\n  /**\n   * Return cached items as map\n   * @return {Immutable.Map}\n   */\n  asMap() {\n    return this.cache\n  }\n\n  /**\n   * Updates this cache when it is determined to contain the associated value\n   * @param {Object} item\n   * @return {BasicCache}\n   */\n  hit(item) {\n    return this\n  }\n\n  /**\n   * Updates this cache when it is determined to **not** contain the associated value\n   * @param {Object} item\n   * @param {CacheEntry} entry\n   * @return {BasicCache}\n   */\n  miss(item, entry) {\n    return new BasicCache(\n      this.cache.update(item, existingEntry => {\n        if (existingEntry && existingEntry.dispatchId > entry.dispatchId) {\n          throw new Error('Refusing to cache older value')\n        }\n        return entry\n      })\n    )\n  }\n\n  /**\n   * Removes entry from cache\n   * @param {Object} item\n   * @return {BasicCache}\n   */\n  evict(item) {\n    return new BasicCache(this.cache.remove(item))\n  }\n}\n\nconst DEFAULT_LRU_LIMIT = 1000\nconst DEFAULT_LRU_EVICT_COUNT = 1\n\n/**\n * Implements caching strategy that evicts least-recently-used items in cache\n * when an item is being added to a cache that has reached a configured size\n * limit.\n */\nexport class LRUCache {\n\n  constructor(limit = DEFAULT_LRU_LIMIT, evictCount = DEFAULT_LRU_EVICT_COUNT, cache = new BasicCache(), lru = OrderedSet()) {\n    console.log(\"using LRU\")\n    this.limit = limit\n    this.evictCount = evictCount\n    this.cache = cache\n    this.lru = lru\n  }\n\n  /**\n   * Retrieve the associated value, if it exists in this cache, otherwise\n   * returns notFoundValue (or undefined if not provided)\n   * @param {Object} item\n   * @param {Object?} notFoundValue\n   * @return {CacheEntry}\n   */\n  lookup(item, notFoundValue) {\n    return this.cache.lookup(item, notFoundValue)\n  }\n\n  /**\n   * Checks if this cache contains an associated value\n   * @param {Object} item\n   * @return {boolean}\n   */\n  has(item) {\n    return this.cache.has(item)\n  }\n\n  /**\n   * Return cached items as map\n   * @return {Immutable.Map}\n   */\n  asMap() {\n    return this.cache.asMap()\n  }\n\n  /**\n   * Updates this cache when it is determined to contain the associated value\n   * @param {Object} item\n   * @return {LRUCache}\n   */\n  hit(item) {\n    if (!this.cache.has(item)) {\n      return this\n    }\n\n    // remove it first to reorder in lru OrderedSet\n    return new LRUCache(this.limit, this.evictCount, this.cache, this.lru.remove(item).add(item))\n  }\n\n  /**\n   * Updates this cache when it is determined to **not** contain the associated value\n   * If cache has reached size limit, the LRU item is evicted.\n   * @param {Object} item\n   * @param {CacheEntry} entry\n   * @return {LRUCache}\n   */\n  miss(item, entry) {\n    var lruCache\n    if (this.lru.size >= this.limit) {\n      if (this.has(item)) {\n        return new LRUCache(\n          this.limit,\n          this.evictCount,\n          this.cache.miss(item, entry),\n          this.lru.remove(item).add(item)\n        )\n      }\n\n      const cache = (this.lru\n                     .take(this.evictCount)\n                     .reduce((c, evictItem) => c.evict(evictItem), this.cache)\n                     .miss(item, entry))\n\n      lruCache = new LRUCache(\n        this.limit,\n        this.evictCount,\n        cache,\n        this.lru.skip(this.evictCount).add(item)\n      )\n    } else {\n      lruCache = new LRUCache(\n        this.limit,\n        this.evictCount,\n        this.cache.miss(item, entry),\n        this.lru.add(item)\n      )\n    }\n    return lruCache\n  }\n\n  /**\n   * Removes entry from cache\n   * @param {Object} item\n   * @return {LRUCache}\n   */\n  evict(item) {\n    if (!this.cache.has(item)) {\n      return this\n    }\n\n    return new LRUCache(\n      this.limit,\n      this.evictCount,\n      this.cache.evict(item),\n      this.lru.remove(item)\n    )\n  }\n}\n\n/**\n * Returns default cache strategy\n * @return {BasicCache}\n */\nexport function DefaultCache() {\n  return new BasicCache()\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/reactor/cache.js\n **/","import Immutable, { List } from 'immutable'\nimport { isFunction, isArray } from './utils'\nimport { isKeyPath } from './key-path'\n\n/**\n * Getter helper functions\n * A getter is an array with the form:\n * [<KeyPath>, ...<KeyPath>, <function>]\n */\nconst identity = (x) => x\n\n/**\n * Checks if something is a getter literal, ex: ['dep1', 'dep2', function(dep1, dep2) {...}]\n * @param {*} toTest\n * @return {boolean}\n */\nfunction isGetter(toTest) {\n  return (isArray(toTest) && isFunction(toTest[toTest.length - 1]))\n}\n\n/**\n * Returns the compute function from a getter\n * @param {Getter} getter\n * @return {function}\n */\nfunction getComputeFn(getter) {\n  return getter[getter.length - 1]\n}\n\n/**\n * Returns an array of deps from a getter\n * @param {Getter} getter\n * @return {function}\n */\nfunction getDeps(getter) {\n  return getter.slice(0, getter.length - 1)\n}\n\n/**\n * Returns an array of deps from a getter and all its deps\n * @param {Getter} getter\n * @param {Immutable.Set} existing\n * @return {Immutable.Set}\n */\nfunction getFlattenedDeps(getter, existing) {\n  if (!existing) {\n    existing = Immutable.Set()\n  }\n\n  const toAdd = Immutable.Set().withMutations(set => {\n    if (!isGetter(getter)) {\n      throw new Error('getFlattenedDeps must be passed a Getter')\n    }\n\n    getDeps(getter).forEach(dep => {\n      if (isKeyPath(dep)) {\n        set.add(List(dep))\n      } else if (isGetter(dep)) {\n        set.union(getFlattenedDeps(dep))\n      } else {\n        throw new Error('Invalid getter, each dependency must be a KeyPath or Getter')\n      }\n    })\n  })\n\n  return existing.union(toAdd)\n}\n\n/**\n * @param {KeyPath}\n * @return {Getter}\n */\nfunction fromKeyPath(keyPath) {\n  if (!isKeyPath(keyPath)) {\n    throw new Error('Cannot create Getter from KeyPath: ' + keyPath)\n  }\n\n  return [keyPath, identity]\n}\n\n/**\n * Adds non enumerated __storeDeps property\n * @param {Getter}\n */\nfunction getStoreDeps(getter) {\n  if (getter.hasOwnProperty('__storeDeps')) {\n    return getter.__storeDeps\n  }\n\n  const storeDeps = getFlattenedDeps(getter)\n    .map(keyPath => keyPath.first())\n    .filter(x => !!x)\n\n\n  Object.defineProperty(getter, '__storeDeps', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: storeDeps,\n  })\n\n  return storeDeps\n}\n\nexport default {\n  isGetter,\n  getComputeFn,\n  getFlattenedDeps,\n  getStoreDeps,\n  getDeps,\n  fromKeyPath,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/getter.js\n **/","import Immutable from 'immutable'\nimport { isArray, isFunction } from './utils'\n\n/**\n * Checks if something is simply a keyPath and not a getter\n * @param {*} toTest\n * @return {boolean}\n */\nexport function isKeyPath(toTest) {\n  return (\n    isArray(toTest) &&\n    !isFunction(toTest[toTest.length - 1])\n  )\n}\n\n/**\n * Checks if two keypaths are equal by value\n * @param {KeyPath} a\n * @param {KeyPath} a\n * @return {Boolean}\n */\nexport function isEqual(a, b) {\n  const iA = Immutable.List(a)\n  const iB = Immutable.List(b)\n\n  return Immutable.is(iA, iB)\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/key-path.js\n **/","import { getOption } from './reactor/fns'\n\n/* eslint-disable no-console */\n/**\n * Wraps a Reactor.react invocation in a console.group\n */\nexport const ConsoleGroupLogger = {\n  /**\n   * @param {ReactorState} reactorState\n   * @param {String} type\n   * @param {*} payload\n   */\n  dispatchStart: function(reactorState, type, payload) {\n    if (!getOption(reactorState, 'logDispatches')) {\n      return\n    }\n\n    if (console.group) {\n      console.groupCollapsed('Dispatch: %s', type)\n      console.group('payload')\n      console.debug(payload)\n      console.groupEnd()\n    }\n  },\n  /**\n   * @param {ReactorState} reactorState\n   * @param {Error} error\n   */\n  dispatchError: function(reactorState, error) {\n    if (!getOption(reactorState, 'logDispatches')) {\n      return\n    }\n\n    if (console.group) {\n      console.debug('Dispatch error: ' + error)\n      console.groupEnd()\n    }\n  },\n  /**\n   * @param {ReactorState} reactorState\n   * @param {Map} state\n   * @param {Set} dirtyStores\n   */\n  dispatchEnd: function(reactorState, state, dirtyStores, previousState) {\n    if (!getOption(reactorState, 'logDispatches')) {\n      return\n    }\n\n    if (console.group) {\n      if (getOption(reactorState, 'logDirtyStores')) {\n        console.log('Stores updated:', dirtyStores.toList().toJS())\n      }\n\n      if (getOption(reactorState, 'logAppState')) {\n        console.debug('Dispatch done, new state: ', state.toJS())\n      }\n      console.groupEnd()\n    }\n  },\n}\n\n/* eslint-enable no-console */\n\nexport const NoopLogger = {\n  /**\n   * @param {ReactorState} reactorState\n   * @param {String} type\n   * @param {*} payload\n   */\n  dispatchStart: function(reactorState, type, payload) {\n  },\n  /**\n   * @param {ReactorState} reactorState\n   * @param {Error} error\n   */\n  dispatchError: function(reactorState, error) {\n  },\n  /**\n   * @param {ReactorState} reactorState\n   * @param {Map} state\n   * @param {Set} dirtyStores\n   */\n  dispatchEnd: function(reactorState, state, dirtyStores) {\n  },\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/logging.js\n **/","import { Map, Set, Record } from 'immutable'\nimport { DefaultCache } from './cache'\nimport { NoopLogger } from '../logging'\n\nexport const PROD_OPTIONS = Map({\n  // logs information for each dispatch\n  logDispatches: false,\n  // log the entire app state after each dispatch\n  logAppState: false,\n  // logs what stores changed after a dispatch\n  logDirtyStores: false,\n  // if true, throws an error when dispatching an `undefined` actionType\n  throwOnUndefinedActionType: false,\n  // if true, throws an error if a store returns undefined\n  throwOnUndefinedStoreReturnValue: false,\n  // if true, throws an error if a store.getInitialState() returns a non immutable value\n  throwOnNonImmutableStore: false,\n  // if true, throws when dispatching in dispatch\n  throwOnDispatchInDispatch: false,\n})\n\nexport const DEBUG_OPTIONS = Map({\n  // logs information for each dispatch\n  logDispatches: true,\n  // log the entire app state after each dispatch\n  logAppState: true,\n  // logs what stores changed after a dispatch\n  logDirtyStores: true,\n  // if true, throws an error when dispatching an `undefined` actionType\n  throwOnUndefinedActionType: true,\n  // if true, throws an error if a store returns undefined\n  throwOnUndefinedStoreReturnValue: true,\n  // if true, throws an error if a store.getInitialState() returns a non immutable value\n  throwOnNonImmutableStore: true,\n  // if true, throws when dispatching in dispatch\n  throwOnDispatchInDispatch: true,\n})\n\nexport const ReactorState = Record({\n  dispatchId: 0,\n  state: Map(),\n  stores: Map(),\n  cache: DefaultCache(),\n  logger: NoopLogger,\n  // maintains a mapping of storeId => state id (monotomically increasing integer whenever store state changes)\n  storeStates: Map(),\n  dirtyStores: Set(),\n  debug: false,\n  // production defaults\n  options: PROD_OPTIONS,\n})\n\nexport const ObserverState = Record({\n  // observers registered to any store change\n  any: Set(),\n  // observers registered to specific store changes\n  stores: Map({}),\n\n  observersMap: Map({}),\n\n  nextId: 1,\n})\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/reactor/records.js\n **/"],"sourceRoot":""}
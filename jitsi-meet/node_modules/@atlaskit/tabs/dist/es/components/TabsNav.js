import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';

/*
  eslint-disable

  jsx-a11y/role-supports-aria-props,
  jsx-a11y/no-static-element-interactions,
  react/sort-comp
*/
import React, { PureComponent } from 'react';
import { Nav, NavItem, NavLine, NavWrapper } from '../styled';

var TabsNav = function (_PureComponent) {
  _inherits(TabsNav, _PureComponent);

  function TabsNav() {
    var _temp, _this, _ret;

    _classCallCheck(this, TabsNav);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { wasKeyboardNav: false }, _this.tabs = [], _this.tabKeyDownHandler = function (e) {
      _this.setState({ wasKeyboardNav: true });
      _this.props.onKeyboardNav(e.key);
    }, _this.tabMouseDownHandler = function (e) {
      return e.preventDefault();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TabsNav.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    // Don't re-render when we are resetting the `wasKeyboardNav` state
    if (nextState.wasKeyboardNav !== this.state.wasKeyboardNav && !nextState.wasKeyboardNav) {
      return false;
    }
    return true;
  };

  TabsNav.prototype.componentDidUpdate = function componentDidUpdate() {
    var _this2 = this;

    // Focus the selected tab if it was selected via keyboard nav
    this.tabs.forEach(function (tab) {
      if (tab.el) {
        if (_this2.state.wasKeyboardNav && tab.isSelected) {
          tab.el.focus();
          _this2.setState({ wasKeyboardNav: false });
        } else {
          // Ensure that focus does not stay on an unselected tab
          tab.el.blur();
        }
      }
    });
  };

  TabsNav.prototype.render = function render() {
    var _this3 = this;

    var tabs = this.props.tabs;


    return React.createElement(
      NavWrapper,
      null,
      React.createElement(NavLine, { status: 'normal' }),
      React.createElement(
        Nav,
        { role: 'tablist' },
        tabs.map(function (tab, index) {
          return React.createElement(
            NavItem,
            {
              'aria-posinset': index + 1,
              'aria-selected': tab.isSelected,
              'aria-setsize': tabs.length,
              innerRef: function innerRef(ref) {
                _this3.tabs.push({
                  el: ref,
                  isSelected: tab.isSelected
                });
              },
              isSelected: tab.isSelected // used in testing
              , key: index,
              onClick: tab.onSelect,
              onKeyDown: _this3.tabKeyDownHandler,
              onMouseDown: _this3.tabMouseDownHandler,
              role: 'tab',
              status: tab.isSelected ? 'selected' : 'normal',
              tabIndex: tab.isSelected ? 0 : -1
            },
            tab.label,
            tab.isSelected ? React.createElement(NavLine, { status: 'selected' }) : null
          );
        })
      )
    );
    /* eslint-enable jsx-a11y/role-supports-aria-props, jsx-a11y/no-static-element-interactions */
  };

  return TabsNav;
}(PureComponent);

TabsNav.propTypes = {
  /** Handler for navigation using the keyboard buttons. */onKeyboardNav: _PropTypes.func.isRequired /** The tabs to display, with content being hidden unless the tab is selected. */,
  tabs: _PropTypes.arrayOf(_PropTypes.shape({
    content: _PropTypes.any,
    isSelected: _PropTypes.bool,
    label: _PropTypes.string.isRequired,
    onSelect: _PropTypes.func.isRequired
  }))
};
export default TabsNav;
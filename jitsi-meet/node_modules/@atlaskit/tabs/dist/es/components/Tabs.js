import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';

/* eslint-disable react/sort-comp */
import React, { PureComponent } from 'react';
import TabsStateless from './TabsStateless';

var Tabs = function (_PureComponent) {
  _inherits(Tabs, _PureComponent);

  function Tabs(props) {
    _classCallCheck(this, Tabs);

    // Set the selected tab to the first tab with defaultSelected provided
    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.getTabs = function () {
      return _this.props.tabs.map(function (tab, index) {
        return _extends({}, tab, {

          isSelected: index === _this.state.selectedTab,
          onKeyboardNav: _this.tabKeyboardNavHandler,
          onSelect: function onSelect() {
            return _this.tabSelectHandler(index);
          }
        });
      });
    };

    _this.tabSelectHandler = function (selectedTabIndex) {
      if (_this.props.onSelect) {
        _this.props.onSelect(selectedTabIndex);
      }

      _this.setState({ selectedTab: selectedTabIndex });
    };

    _this.tabKeyboardNavHandler = function (key) {
      // Handle left and right arrow key presses by selecting the previous or next tab

      var selectedIndex = _this.state.selectedTab;
      if (selectedIndex !== null) {
        var nextIndex = selectedIndex;

        if (key === 'ArrowLeft') {
          nextIndex = Number(selectedIndex) - 1 < 0 ? 0 : Number(selectedIndex) - 1;
        } else if (key === 'ArrowRight') {
          nextIndex = selectedIndex + 1 > _this.props.tabs.length - 1 ? _this.props.tabs.length - 1 : selectedIndex + 1;
        }

        if (nextIndex !== selectedIndex) {
          _this.tabSelectHandler(Number(nextIndex));
        }
      }
    };

    var defaultSelectedIndex = null;
    if (props) {
      for (var i = 0; i < props.tabs.length; i++) {
        if (props.tabs[i].defaultSelected) {
          defaultSelectedIndex = i;
          break;
        }
      }
    }

    _this.state = {
      selectedTab: defaultSelectedIndex
    };
    return _this;
  }

  Tabs.prototype.render = function render() {
    return React.createElement(TabsStateless, {
      onKeyboardNav: this.tabKeyboardNavHandler,
      tabs: this.getTabs()
    });
  };

  return Tabs;
}(PureComponent);

Tabs.propTypes = {
  /** Handler for selecting a new tab. Called with the number of the tab, zero-indexed */
  onSelect: _PropTypes.func /** The tabs to display, with content being hidden unless the tab is selected. */
  ,
  tabs: _PropTypes.arrayOf(_PropTypes.shape({
    content: _PropTypes.any,
    defaultSelected: _PropTypes.bool,
    label: _PropTypes.any.isRequired
  })).isRequired
};
Tabs.defaultProps = {
  onSelect: function onSelect() {},
  tabs: []
};
export default Tabs;
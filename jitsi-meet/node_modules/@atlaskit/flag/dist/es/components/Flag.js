import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import ChevronDownIcon from '@atlaskit/icon/glyph/chevron-down';
import ChevronUpIcon from '@atlaskit/icon/glyph/chevron-up';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import Container, { Description, DismissButton, Icon, Content, Title, Header } from '../styled/Flag';
import Expander from './Expander';
import Actions from './FlagActions';
import { flagFocusRingColor } from '../theme';


export var DEFAULT_APPEARANCE = 'normal';

var Flag = function (_PureComponent) {
  _inherits(Flag, _PureComponent);

  function Flag() {
    var _temp, _this, _ret;

    _classCallCheck(this, Flag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { isExpanded: false }, _this.dismissFlag = function () {
      if (_this.props.isDismissAllowed && _this.props.onDismissed) {
        _this.props.onDismissed(_this.props.id);
      }
    }, _this.isBold = function () {
      return _this.props.appearance !== DEFAULT_APPEARANCE;
    }, _this.toggleExpand = function () {
      _this.setState({ isExpanded: !_this.state.isExpanded });
    }, _this.renderToggleOrDismissButton = function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          description = _this$props.description,
          actions = _this$props.actions,
          isDismissAllowed = _this$props.isDismissAllowed,
          onDismissed = _this$props.onDismissed;

      var isBold = _this.isBold();
      if (!isDismissAllowed || !isBold && !onDismissed || isBold && !description && (!actions || !actions.length)) {
        return null;
      }

      var ChevronIcon = _this.state.isExpanded ? ChevronUpIcon : ChevronDownIcon;
      var ButtonIcon = isBold ? ChevronIcon : CrossIcon;
      var buttonLabel = isBold ? 'Toggle flag body' : 'Dismiss flag';
      var buttonAction = isBold ? _this.toggleExpand : _this.dismissFlag;

      return React.createElement(
        DismissButton,
        {
          appearance: appearance,
          focusRingColor: flagFocusRingColor(_this.props),
          onClick: buttonAction,
          type: 'button'
        },
        React.createElement(ButtonIcon, { label: buttonLabel, size: 'small' })
      );
    }, _this.renderBody = function () {
      var _this$props2 = _this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          description = _this$props2.description;

      var isExpanded = !_this.isBold() || _this.state.isExpanded;

      return React.createElement(
        Expander,
        { isExpanded: isExpanded },
        description && React.createElement(
          Description,
          { appearance: appearance },
          description
        ),
        React.createElement(Actions, { actions: actions, appearance: appearance })
      );
    }, _this.handleMouseDown = function (e) {
      e.preventDefault();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp

  Flag.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var actions = nextProps.actions,
        description = nextProps.description;

    if (this.isBold() && this.state.isExpanded && !description && (!actions || !actions.length)) {
      this.toggleExpand();
    }
  };

  // We prevent default on mouse down to avoid focus ring when the flag is clicked,
  // while still allowing it to be focused with the keyboard.


  Flag.prototype.render = function render() {
    var _props = this.props,
        appearance = _props.appearance,
        icon = _props.icon,
        title = _props.title,
        onMouseOver = _props.onMouseOver,
        onFocus = _props.onFocus,
        onMouseOut = _props.onMouseOut,
        onBlur = _props.onBlur;

    var autoDismissProps = { onMouseOver: onMouseOver, onFocus: onFocus, onMouseOut: onMouseOut, onBlur: onBlur };
    var OptionalDismissButton = this.renderToggleOrDismissButton;
    var Body = this.renderBody;

    return React.createElement(
      Container,
      _extends({
        appearance: appearance,
        role: 'alert',
        tabIndex: '0',
        onMouseDown: this.handleMouseDown
      }, autoDismissProps),
      React.createElement(
        Icon,
        null,
        icon
      ),
      React.createElement(
        Content,
        null,
        React.createElement(
          Header,
          null,
          React.createElement(
            Title,
            { appearance: appearance },
            title
          ),
          React.createElement(OptionalDismissButton, null)
        ),
        React.createElement(Body, null)
      )
    );
  };

  return Flag;
}(PureComponent);

Flag.propTypes = {
  /** Array of clickable actions to be shown at the bottom of the flag. For flags where appearance
    * is 'normal', actions will be shown as links. For all other appearance values, actions will
    * shown as buttons.
    */actions: _PropTypes.arrayOf(_PropTypes.shape({
    content: _PropTypes.any.isRequired,
    onClick: _PropTypes.func.isRequired
  })) /** Makes the flag appearance bold. Setting this to anything other than 'normal' hides the
        * dismiss button.
        */,
  appearance: _PropTypes.oneOf(['error', 'info', 'normal', 'success', 'warning']) /** The secondary content shown below the flag title */,
  description: _PropTypes.any /** The icon displayed in the top-left of the flag. Should be an instance of `@atlaskit/icon`.
                                * Your icon will receive the appropriate default color, which you can override by wrapping the
                                * icon in a containing element with CSS `color` set to your preferred icon color.
                                */,
  icon: _PropTypes.any.isRequired /** A unique identifier used for rendering and onDismissed callbacks. */,
  id: _PropTypes.oneOfType([_PropTypes.number, _PropTypes.string]).isRequired /** Private, do not use. */,
  isDismissAllowed: _PropTypes.bool /** Private, do not use. Use the FlagGroup onDismissed handler. */,
  onDismissed: _PropTypes.func /** The bold text shown at the top of the flag. */,
  title: _PropTypes.string.isRequired,
  /** Standard onBlur event, applied to Flag by AutoDismissFlag */onBlur: _PropTypes.func /** Standard onFocus event, applied to Flag by AutoDismissFlag */,
  onFocus: _PropTypes.func /** Standard onMouseOut event, applied to Flag by AutoDismissFlag */,
  onMouseOut: _PropTypes.func /** Standard onMouseOver event, applied to Flag by AutoDismissFlag */,
  onMouseOver: _PropTypes.func
};
Flag.defaultProps = {
  actions: [],
  appearance: DEFAULT_APPEARANCE,
  isDismissAllowed: false
};
export default Flag;
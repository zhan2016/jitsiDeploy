import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import Wrapper from '../styled/Wrapper';

var FlagAnimationWrapper = function (_PureComponent) {
  _inherits(FlagAnimationWrapper, _PureComponent);

  function FlagAnimationWrapper() {
    var _temp, _this, _ret;

    _classCallCheck(this, FlagAnimationWrapper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      isEntering: false,
      isLeaving: false
    }, _this.parentNode = null, _this.runAfterAnimation = function (callback) {
      var _this2 = _this,
          parentNode = _this2.parentNode;


      function executeCallback() {
        callback();
        return parentNode && parentNode.removeEventListener('animationend', executeCallback);
      }

      return parentNode && parentNode.addEventListener('animationend', executeCallback);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp


  FlagAnimationWrapper.prototype.componentWillEnter = function componentWillEnter(callback) {
    this.setState({ isEntering: true });
    this.runAfterAnimation(callback);
  };

  FlagAnimationWrapper.prototype.componentDidEnter = function componentDidEnter() {
    this.setState({ isEntering: false });
  };

  FlagAnimationWrapper.prototype.componentWillLeave = function componentWillLeave(callback) {
    this.setState({ isLeaving: true });
    this.runAfterAnimation(callback);
  };

  FlagAnimationWrapper.prototype.componentDidLeave = function componentDidLeave() {
    this.setState({ isLeaving: false });
  };

  /**
   * componentWillEnter and componentWillLeave provide a callback function which we need to call
   * when our enter/leave animations are complete. This function listens for an animationend event
   * then runs the callback.
   */


  FlagAnimationWrapper.prototype.render = function render() {
    var _this3 = this;

    return React.createElement(
      Wrapper,
      {
        innerRef: function innerRef(node) {
          _this3.parentNode = node ? node.parentElement : null;
        },
        isEntering: this.state.isEntering,
        isLeaving: this.state.isLeaving
      },
      this.props.children
    );
  };

  return FlagAnimationWrapper;
}(PureComponent);

FlagAnimationWrapper.propTypes = {
  children: _PropTypes.any.isRequired
};
export default FlagAnimationWrapper;
import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { Component } from 'react';
import Flag from './Flag';


export var AUTO_DISMISS_SECONDS = 15;

var AutoDismissFlag = function (_Component) {
  _inherits(AutoDismissFlag, _Component);

  function AutoDismissFlag() {
    var _temp, _this, _ret;

    _classCallCheck(this, AutoDismissFlag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.startAutoDismissTimer = function () {
      if (!_this.isAutoDismissAllowed()) {
        return;
      }

      _this.stopAutoDismissTimer();
      _this.autoDismissTimer = setTimeout(_this.handleAutoDismissTimerEnd, AUTO_DISMISS_SECONDS * 1000);
    }, _this.stopAutoDismissTimer = function () {
      if (_this.autoDismissTimer) {
        clearTimeout(_this.autoDismissTimer);
        _this.autoDismissTimer = null;
      }
    }, _this.dismissFlag = function () {
      if (_this.isAutoDismissAllowed() && _this.props.onDismissed) {
        _this.props.onDismissed(_this.props.id);
      }
    }, _this.handleAutoDismissTimerEnd = function () {
      _this.dismissFlag();
    }, _this.handleInteractionStart = function () {
      _this.stopAutoDismissTimer();
    }, _this.isAutoDismissAllowed = function () {
      return _this.props.isDismissAllowed && _this.props.onDismissed;
    }, _this.handleInteractionEnd = function () {
      _this.startAutoDismissTimer();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp

  AutoDismissFlag.prototype.componentDidMount = function componentDidMount() {
    this.startAutoDismissTimer();
  };

  AutoDismissFlag.prototype.componentWillUnmount = function componentWillUnmount() {
    this.stopAutoDismissTimer();
  };

  AutoDismissFlag.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.isDismissAllowed && !prevProps.isDismissAllowed) {
      this.startAutoDismissTimer();
    } else if (!this.props.isDismissAllowed && prevProps.isDismissAllowed) {
      this.stopAutoDismissTimer();
    }
  };

  AutoDismissFlag.prototype.render = function render() {
    return React.createElement(Flag, _extends({
      onMouseOver: this.handleInteractionStart,
      onFocus: this.handleInteractionStart,
      onMouseOut: this.handleInteractionEnd,
      onBlur: this.handleInteractionEnd
    }, this.props));
  };

  return AutoDismissFlag;
}(Component);

AutoDismissFlag.propTypes = {
  /** Array of clickable actions to be shown at the bottom of the flag. For flags where appearance
    * is 'normal', actions will be shown as links. For all other appearance values, actions will
    * shown as buttons.
    */actions: _PropTypes.arrayOf(_PropTypes.shape({
    content: _PropTypes.any.isRequired,
    onClick: _PropTypes.func.isRequired
  })) /** Makes the flag appearance bold. Setting this to anything other than 'normal' hides the
        * dismiss button.
        */,
  appearance: _PropTypes.oneOf(['error', 'info', 'normal', 'success', 'warning']) /** The secondary content shown below the flag title */,
  description: _PropTypes.any /** The icon displayed in the top-left of the flag. Should be an instance of `@atlaskit/icon`.
                                * Your icon will receive the appropriate default color, which you can override by wrapping the
                                * icon in a containing element with CSS `color` set to your preferred icon color.
                                */,
  icon: _PropTypes.any.isRequired /** A unique identifier used for rendering and onDismissed callbacks. */,
  id: _PropTypes.oneOfType([_PropTypes.number, _PropTypes.string]).isRequired /** Private, do not use. */,
  isDismissAllowed: _PropTypes.bool /** Private, do not use. Use the FlagGroup onDismissed handler. */,
  onDismissed: _PropTypes.func /** The bold text shown at the top of the flag. */,
  title: _PropTypes.string.isRequired
};
export default AutoDismissFlag;
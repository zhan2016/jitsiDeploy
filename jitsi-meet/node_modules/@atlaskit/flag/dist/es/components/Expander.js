import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import ExpanderInternal from '../styled/Expander';

var Expander = function (_PureComponent) {
  _inherits(Expander, _PureComponent);

  function Expander() {
    var _temp, _this, _ret;

    _classCallCheck(this, Expander);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { isAnimating: false }, _this.handleTransitionEnd = function () {
      _this.setState({ isAnimating: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp


  Expander.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    if (this.props.isExpanded !== nextProps.isExpanded) {
      this.setState({ isAnimating: true });
    }
  };

  Expander.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        isExpanded = _props.isExpanded;
    var isAnimating = this.state.isAnimating;

    // Need to always render the ExpanderInternal otherwise the
    // reveal transiton doesn't happen. We can't use CSS animation for
    // the the reveal because we don't know the height of the content.

    var childrenIfExpanded = isAnimating || isExpanded ? children : null;

    return React.createElement(
      ExpanderInternal,
      {
        'aria-hidden': !isExpanded,
        isExpanded: isExpanded,
        onTransitionEnd: this.handleTransitionEnd
      },
      childrenIfExpanded
    );
  };

  return Expander;
}(PureComponent);

Expander.propTypes = {
  children: _PropTypes.any,
  isExpanded: _PropTypes.bool
};
Expander.defaultProps = { isExpanded: false };
export default Expander;
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import ReactDOM from 'react-dom';
import Layer from '@atlaskit/layer';
import { gridSize } from '@atlaskit/theme';
import { Container } from './styled';

// TODO: expose positions and flipPositions from Layer and pull in here
var positions = ['top left', 'top center', 'top right', 'right top', 'right middle', 'right bottom', 'bottom left', 'bottom center', 'bottom right', 'left top', 'left middle', 'left bottom'];
var flipPositions = ['top', 'right', 'bottom', 'left'];

// TODO: expose applicable props from Layer and pull in here

var InlineDialog = function (_PureComponent) {
  _inherits(InlineDialog, _PureComponent);

  function InlineDialog() {
    var _temp, _this, _ret;

    _classCallCheck(this, InlineDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.componentDidMount = function () {
      document.addEventListener('click', _this.handleClickOutside);
    }, _this.componentWillUnmount = function () {
      document.removeEventListener('click', _this.handleClickOutside);
    }, _this.handleClickOutside = function (event) {
      if (_this.props.isOpen) {
        var domNode = ReactDOM.findDOMNode(_this); // eslint-disable-line react/no-find-dom-node
        if (!domNode || event.target instanceof Node && !domNode.contains(event.target)) {
          _this.props.onClose({ isOpen: false, event: event });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  InlineDialog.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        content = _props.content,
        isOpen = _props.isOpen,
        onContentBlur = _props.onContentBlur,
        onContentClick = _props.onContentClick,
        onContentFocus = _props.onContentFocus,
        position = _props.position,
        shouldFlip = _props.shouldFlip;

    // this offset is passed to popper as two space separated numbers representing
    // the offset from the target the first is distance along the same axis you are
    // on (top or bottom aligned would move left/right) and the second is on the
    // perpendicular axis (how far 'away' you are from the target) both are measured
    // in pixels

    var dialogOffset = '0 ' + gridSize(this.props);

    var layerContent = isOpen ? React.createElement(
      Container,
      {
        onBlurCapture: onContentBlur,
        onClick: onContentClick,
        onFocusCapture: onContentFocus,
        tabIndex: '-1'
      },
      content
    ) : null;

    return React.createElement(
      Layer,
      {
        autoFlip: shouldFlip,
        content: layerContent,
        offset: dialogOffset,
        position: position
      },
      React.createElement(
        'div',
        null,
        children
      )
    );
  };

  return InlineDialog;
}(PureComponent);

InlineDialog.propTypes = {
  /** The elements that the InlineDialog will be positioned relative to. */
  children: PropTypes.node,
  /** The elements to be displayed within the InlineDialog. */
  content: PropTypes.node,
  /** Sets whether to show or hide the dialog. */
  isOpen: PropTypes.bool,
  /** Function called when you lose focus on the object. */
  onContentBlur: PropTypes.func,
  /** Function called when you click on the open dialog. */
  onContentClick: PropTypes.func,
  /** Function called when you focus on the open dialog. */
  onContentFocus: PropTypes.func,
  /** Function called when the dialog is open and a click occurs anywhere outside
  the dialog. Calls with an object { isOpen: false } and the type of event that
  triggered the close. */
  onClose: PropTypes.func,
  /** Where the dialog should appear, relative to the contents of the children. */
  position: PropTypes.oneOf(positions),
  /** Whether the dialog's position should be altered when there is no space
  for it in its default position. If an array is passed, it will use the first
  position where there is enough space, displaying in the last position if none
  have enough space. */
  shouldFlip: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.oneOf(flipPositions))])
};
InlineDialog.defaultProps = {
  isOpen: false,
  onContentBlur: function onContentBlur() {},
  onContentClick: function onContentClick() {},
  onContentFocus: function onContentFocus() {},
  onClose: function onClose() {},
  position: 'bottom center',
  shouldFlip: false
};
export default InlineDialog;
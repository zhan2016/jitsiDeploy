import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';

import Container from './styled/Container';
import Svg from './styled/Svg';


var SIZES_MAP = {
  small: 20,
  medium: 30,
  large: 50,
  xlarge: 100
};
var DEFAULT_SIZE = SIZES_MAP.small;

var SpinnerGlyph = function (_PureComponent) {
  _inherits(SpinnerGlyph, _PureComponent);

  function SpinnerGlyph() {
    var _temp, _this, _ret;

    _classCallCheck(this, SpinnerGlyph);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      phase: ''
    }, _this.runAfterAnimation = function (callback) {
      var _this2 = _this,
          parentNode = _this2.parentNode;

      function executeCallback(event) {
        // ignore animation events on the glyph
        if (event.target.tagName === 'svg') {
          return false;
        }
        callback();
        return parentNode && parentNode.removeEventListener('animationend', executeCallback);
      }
      return parentNode && parentNode.addEventListener('animationend', executeCallback);
    }, _this.validateSize = function () {
      var size = _this.props.size;

      var spinnerSize = SIZES_MAP[size] || size;
      return typeof spinnerSize === 'number' ? spinnerSize : DEFAULT_SIZE;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // eslint-disable-next-line react/sort-comp


  SpinnerGlyph.prototype.componentWillAppear = function componentWillAppear(callback) {
    this.enter(callback);
  };

  SpinnerGlyph.prototype.componentDidAppear = function componentDidAppear() {
    this.idle();
  };

  SpinnerGlyph.prototype.componentWillEnter = function componentWillEnter(callback) {
    this.enter(callback);
  };

  SpinnerGlyph.prototype.componentDidEnter = function componentDidEnter() {
    this.idle();
  };

  SpinnerGlyph.prototype.componentWillLeave = function componentWillLeave(callback) {
    this.leave(callback);
  };

  SpinnerGlyph.prototype.componentDidLeave = function componentDidLeave() {
    this.props.onComplete();
  };

  SpinnerGlyph.prototype.enter = function enter(callback) {
    var _this3 = this;

    var setEnterPhase = function setEnterPhase() {
      _this3.setState({ phase: 'ENTER' });
      _this3.runAfterAnimation(callback);
    };

    var delay = this.props.delay;

    if (delay) {
      this.setState({ phase: 'DELAY' });
      this.runAfterAnimation(setEnterPhase);
    } else {
      setEnterPhase();
    }
  };

  SpinnerGlyph.prototype.idle = function idle() {
    this.setState({ phase: 'IDLE' });
  };

  SpinnerGlyph.prototype.leave = function leave(callback) {
    this.setState({ phase: 'LEAVE' });
    this.runAfterAnimation(callback);
  };

  SpinnerGlyph.prototype.render = function render() {
    var _this4 = this;

    var phase = this.state.phase;
    var _props = this.props,
        delay = _props.delay,
        invertColor = _props.invertColor;

    var size = this.validateSize();

    var strokeWidth = Math.round(size / 10);
    var strokeRadius = size / 2 - strokeWidth / 2;

    return React.createElement(
      Container,
      {
        delay: delay / 1000,
        innerRef: function innerRef(node) {
          _this4.parentNode = node ? node.parentElement : null;
        },
        phase: phase,
        size: size
      },
      React.createElement(
        Svg,
        {
          focusable: 'false',
          height: size,
          invertColor: invertColor,
          phase: phase,
          size: size,
          viewBox: '0 0 ' + size + ' ' + size,
          width: size,
          xmlns: 'http://www.w3.org/2000/svg'
        },
        React.createElement('circle', {
          cx: size / 2,
          cy: size / 2,
          r: strokeRadius
        })
      )
    );
  };

  return SpinnerGlyph;
}(PureComponent);

SpinnerGlyph.propTypes = {
  /** Time in milliseconds after component mount before spinner is visible. */delay: _PropTypes.number.isRequired /** Set the spinner color to white, for use in dark-themed UIs. */,
  invertColor: _PropTypes.bool.isRequired /** Handler for once the spinner has completed its outro animation */,
  onComplete: _PropTypes.func.isRequired /** Size of the spinner. */,
  size: _PropTypes.oneOfType([_PropTypes.oneOf(['small']), _PropTypes.oneOf(['medium']), _PropTypes.oneOf(['large']), _PropTypes.oneOf(['xlarge']), _PropTypes.number]).isRequired
};
export default SpinnerGlyph;
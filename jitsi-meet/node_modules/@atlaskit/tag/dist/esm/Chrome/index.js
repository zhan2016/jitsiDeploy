import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import { Span } from './styled';

var Chrome = function (_PureComponent) {
  _inherits(Chrome, _PureComponent);

  function Chrome() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Chrome);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Chrome.__proto__ || _Object$getPrototypeOf(Chrome)).call.apply(_ref, [this].concat(args))), _this), _this.handleKeyPress = function (e) {
      var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';

      if (_this.chromeRef && spacebarOrEnter) {
        var link = _this.chromeRef.querySelector('a');
        if (link) link.click();
      }
    }, _this.handleBlur = function () {
      _this.props.onFocusChange(false);
    }, _this.handleFocus = function (e) {
      if (e.target === _this.chromeRef) _this.props.onFocusChange(true);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Chrome, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          isLink = _props.isLink,
          isRemovable = _props.isRemovable,
          isRemoved = _props.isRemoved,
          isRemoving = _props.isRemoving,
          isRounded = _props.isRounded,
          markedForRemoval = _props.markedForRemoval,
          color = _props.color;


      var props = {
        innerRef: function innerRef(r) {
          _this2.chromeRef = r;
        },
        isRemovable: isRemovable,
        isRemoved: isRemoved,
        isRemoving: isRemoving,
        isRounded: isRounded,
        markedForRemoval: markedForRemoval,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyPress: this.handleKeyPress,
        tabIndex: -1,
        color: color,
        role: ''
      };

      if (isLink) {
        props.role = 'link';
        props.tabIndex = 0;
      }

      return React.createElement(
        Span,
        props,
        children
      );
    }
  }]);

  return Chrome;
}(PureComponent);

export default Chrome;
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  font-size: ', 'px;\n  font-weight: normal;\n  line-height: 1;\n  margin-left: ', 'px;\n  margin-right: ', 'px;\n  padding: 2px 0;\n  max-width: ', ';\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n'], ['\n  font-size: ', 'px;\n  font-weight: normal;\n  line-height: 1;\n  margin-left: ', 'px;\n  margin-right: ', 'px;\n  padding: 2px 0;\n  max-width: ', ';\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n  ', ';\n'], ['\n  ', ';\n']),
    _templateObject3 = _taggedTemplateLiteral(['\n      color: inherit;\n    '], ['\n      color: inherit;\n    ']),
    _templateObject4 = _taggedTemplateLiteral(['\n      color: ', ';\n    '], ['\n      color: ', ';\n    ']),
    _templateObject5 = _taggedTemplateLiteral(['\n  ', ' ', ' text-decoration: ', ';\n\n  &:hover {\n    color: ', ';\n    ', ';\n  }\n'], ['\n  ', ' ', ' text-decoration: ', ';\n\n  &:hover {\n    color: ', ';\n    ', ';\n  }\n']),
    _templateObject6 = _taggedTemplateLiteral(['\n            color: inherit;\n          '], ['\n            color: inherit;\n          ']);

import styled, { css } from 'styled-components';
import { gridSize, fontSize, colors, math } from '@atlaskit/theme';
import { buttonWidthUnitless, maxTextWidth, maxTextWidthUnitless } from '../constants';

// Common styles for Text & Link
var COMMON_STYLES = css(_templateObject, fontSize, math.divide(gridSize, 2), math.divide(gridSize, 2), function (_ref) {
  var isRemovable = _ref.isRemovable;
  return isRemovable ? maxTextWidthUnitless - buttonWidthUnitless + 'px' : maxTextWidth;
});

export var Text = styled.span(_templateObject2, COMMON_STYLES);

// Styles exclusive to Link

var getFocusedStyles = function getFocusedStyles(_ref2) {
  var isFocused = _ref2.isFocused,
      color = _ref2.color,
      rest = _objectWithoutProperties(_ref2, ['isFocused', 'color']);

  if (color !== 'standard') return css(_templateObject3);
  if (isFocused) return css(_templateObject4, colors.link(rest));
  return null;
};

export var Link = styled.a(_templateObject5, COMMON_STYLES, getFocusedStyles, function (_ref3) {
  var color = _ref3.color;
  return color === 'standard' ? 'none' : 'underline';
}, colors.linkHover, function (_ref4) {
  var color = _ref4.color;
  return color === 'standard' ? '' : css(_templateObject6);
});
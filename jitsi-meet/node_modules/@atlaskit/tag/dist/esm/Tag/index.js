import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';

import Chrome from '../Chrome';
import Content from '../Content';
import RemoveButton from '../RemoveButton';

import Before from './styledBefore';
import Container from './styledContainer';

var colorList = ['standard', 'green', 'blue', 'red', 'purple', 'grey', 'teal', 'yellow', 'greenLight', 'blueLight', 'redLight', 'purpleLight', 'greyLight', 'tealLight', 'yellowLight'];

var Tag = function (_PureComponent) {
  _inherits(Tag, _PureComponent);

  function Tag() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tag.__proto__ || _Object$getPrototypeOf(Tag)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isRemoving: false,
      isRemoved: false,
      markedForRemoval: false,
      isFocused: false
    }, _this.handleRemoveRequest = function () {
      if (_this.props.onBeforeRemoveAction && _this.props.onBeforeRemoveAction()) {
        _this.setState({ isRemoving: true, isRemoved: false });
      }
    }, _this.handleRemoveComplete = function () {
      if (_this.props.onAfterRemoveAction) {
        _this.props.onAfterRemoveAction(_this.props.text);
      }
      _this.setState({ isRemoving: false, isRemoved: true });
    }, _this.handleHoverChange = function (hoverState) {
      _this.setState({ markedForRemoval: hoverState });
    }, _this.handleFocusChange = function (focusState) {
      _this.setState({ isFocused: focusState });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tag, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          isFocused = _state.isFocused,
          isRemoved = _state.isRemoved,
          isRemoving = _state.isRemoving,
          markedForRemoval = _state.markedForRemoval;
      var _props = this.props,
          appearance = _props.appearance,
          elemBefore = _props.elemBefore,
          href = _props.href,
          removeButtonText = _props.removeButtonText,
          text = _props.text,
          color = _props.color;


      var safeColor = colorList.includes(color) ? color : 'standard';

      var isRemovable = Boolean(removeButtonText);
      var isRounded = appearance === 'rounded';
      var styled = {
        isFocused: isFocused,
        isRemovable: isRemovable,
        isRemoved: isRemoved,
        isRemoving: isRemoving,
        isRounded: isRounded,
        markedForRemoval: markedForRemoval,
        color: safeColor
      };
      var onAnimationEnd = function onAnimationEnd() {
        return isRemoving && _this2.handleRemoveComplete();
      };

      return React.createElement(
        Container,
        _extends({}, styled, { onAnimationEnd: onAnimationEnd }),
        React.createElement(
          Chrome,
          _extends({}, styled, {
            isLink: !!href,
            onFocusChange: this.handleFocusChange
          }),
          elemBefore ? React.createElement(
            Before,
            null,
            elemBefore
          ) : null,
          React.createElement(
            Content,
            _extends({}, styled, { href: href }),
            text
          ),
          isRemovable ? React.createElement(RemoveButton, _extends({}, styled, {
            onHoverChange: this.handleHoverChange,
            onRemoveAction: this.handleRemoveRequest,
            removeText: removeButtonText
          })) : null
        )
      );
    }
  }]);

  return Tag;
}(PureComponent);

Tag.defaultProps = {
  color: 'standard',
  appearance: 'default',
  elemBefore: null,
  onAfterRemoveAction: function onAfterRemoveAction() {},
  onBeforeRemoveAction: function onBeforeRemoveAction() {
    return true;
  }
};
export default Tag;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Chrome = require('../Chrome');

var _Chrome2 = _interopRequireDefault(_Chrome);

var _Content = require('../Content');

var _Content2 = _interopRequireDefault(_Content);

var _RemoveButton = require('../RemoveButton');

var _RemoveButton2 = _interopRequireDefault(_RemoveButton);

var _styledBefore = require('./styledBefore');

var _styledBefore2 = _interopRequireDefault(_styledBefore);

var _styledContainer = require('./styledContainer');

var _styledContainer2 = _interopRequireDefault(_styledContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var colorList = ['standard', 'green', 'blue', 'red', 'purple', 'grey', 'teal', 'yellow', 'greenLight', 'blueLight', 'redLight', 'purpleLight', 'greyLight', 'tealLight', 'yellowLight'];

var Tag = function (_PureComponent) {
  (0, _inherits3.default)(Tag, _PureComponent);

  function Tag() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Tag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Tag.__proto__ || (0, _getPrototypeOf2.default)(Tag)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isRemoving: false,
      isRemoved: false,
      markedForRemoval: false,
      isFocused: false
    }, _this.handleRemoveRequest = function () {
      if (_this.props.onBeforeRemoveAction && _this.props.onBeforeRemoveAction()) {
        _this.setState({ isRemoving: true, isRemoved: false });
      }
    }, _this.handleRemoveComplete = function () {
      if (_this.props.onAfterRemoveAction) {
        _this.props.onAfterRemoveAction(_this.props.text);
      }
      _this.setState({ isRemoving: false, isRemoved: true });
    }, _this.handleHoverChange = function (hoverState) {
      _this.setState({ markedForRemoval: hoverState });
    }, _this.handleFocusChange = function (focusState) {
      _this.setState({ isFocused: focusState });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Tag, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          isFocused = _state.isFocused,
          isRemoved = _state.isRemoved,
          isRemoving = _state.isRemoving,
          markedForRemoval = _state.markedForRemoval;
      var _props = this.props,
          appearance = _props.appearance,
          elemBefore = _props.elemBefore,
          href = _props.href,
          removeButtonText = _props.removeButtonText,
          text = _props.text,
          color = _props.color;


      var safeColor = colorList.includes(color) ? color : 'standard';

      var isRemovable = Boolean(removeButtonText);
      var isRounded = appearance === 'rounded';
      var styled = {
        isFocused: isFocused,
        isRemovable: isRemovable,
        isRemoved: isRemoved,
        isRemoving: isRemoving,
        isRounded: isRounded,
        markedForRemoval: markedForRemoval,
        color: safeColor
      };
      var onAnimationEnd = function onAnimationEnd() {
        return isRemoving && _this2.handleRemoveComplete();
      };

      return _react2.default.createElement(
        _styledContainer2.default,
        (0, _extends3.default)({}, styled, { onAnimationEnd: onAnimationEnd }),
        _react2.default.createElement(
          _Chrome2.default,
          (0, _extends3.default)({}, styled, {
            isLink: !!href,
            onFocusChange: this.handleFocusChange
          }),
          elemBefore ? _react2.default.createElement(
            _styledBefore2.default,
            null,
            elemBefore
          ) : null,
          _react2.default.createElement(
            _Content2.default,
            (0, _extends3.default)({}, styled, { href: href }),
            text
          ),
          isRemovable ? _react2.default.createElement(_RemoveButton2.default, (0, _extends3.default)({}, styled, {
            onHoverChange: this.handleHoverChange,
            onRemoveAction: this.handleRemoveRequest,
            removeText: removeButtonText
          })) : null
        )
      );
    }
  }]);
  return Tag;
}(_react.PureComponent);

Tag.defaultProps = {
  color: 'standard',
  appearance: 'default',
  elemBefore: null,
  onAfterRemoveAction: function onAfterRemoveAction() {},
  onBeforeRemoveAction: function onBeforeRemoveAction() {
    return true;
  }
};
exports.default = Tag;
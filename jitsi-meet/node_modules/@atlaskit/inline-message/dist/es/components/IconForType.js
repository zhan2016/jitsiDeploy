import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import typesMapping from './types';

import IconWrapper from '../styled/IconForType';

var SelectedIconForType = function (_PureComponent) {
  _inherits(SelectedIconForType, _PureComponent);

  function SelectedIconForType() {
    _classCallCheck(this, SelectedIconForType);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  SelectedIconForType.prototype.render = function render() {
    var _props = this.props,
        type = _props.type,
        isHovered = _props.isHovered,
        isOpen = _props.isOpen;
    var _typesMapping$type = typesMapping[type],
        SelectedIcon = _typesMapping$type.icon,
        iconSize = _typesMapping$type.iconSize;


    return React.createElement(
      IconWrapper,
      {
        appearance: type,
        isHovered: isHovered,
        isOpen: isOpen
      },
      React.createElement(SelectedIcon, {
        label: 'Inline message icon',
        size: iconSize
      })
    );
  };

  return SelectedIconForType;
}(PureComponent);

SelectedIconForType.propTypes = {
  isHovered: _PropTypes.bool.isRequired,
  isOpen: _PropTypes.bool.isRequired,
  type: _PropTypes.oneOf(['connectivity', 'confirmation', 'info', 'warning', 'error']).isRequired
};
export default SelectedIconForType;
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import Button from '@atlaskit/button';
import InlineDialog from '@atlaskit/inline-dialog';
import IconForType from './IconForType';
import { types, defaultType } from './types';
import { Root, ButtonContents, Text, Title } from '../styled/InlineMessage';

var InlineMessage = function (_PureComponent) {
  _inherits(InlineMessage, _PureComponent);

  function InlineMessage() {
    var _temp, _this, _ret;

    _classCallCheck(this, InlineMessage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      isOpen: false,
      isHovered: false
    }, _this.onMouseEnter = function () {
      _this.setState({ isHovered: true });
    }, _this.onMouseLeave = function () {
      _this.setState({ isHovered: false });
    }, _this.toggleDialog = function () {
      _this.setState({ isOpen: !_this.state.isOpen });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  InlineMessage.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        position = _props.position,
        secondaryText = _props.secondaryText,
        title = _props.title,
        type = _props.type;
    var _state = this.state,
        isHovered = _state.isHovered,
        isOpen = _state.isOpen;

    return React.createElement(
      Root,
      {
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        appearance: type
      },
      React.createElement(
        InlineDialog,
        {
          content: children,
          isOpen: isOpen,
          position: position,
          shouldFlip: true
        },
        React.createElement(
          Button,
          {
            appearance: 'subtle-link',
            onClick: this.toggleDialog,
            spacing: 'none'
          },
          React.createElement(
            ButtonContents,
            { isHovered: isHovered },
            React.createElement(IconForType, {
              type: type,
              isHovered: isHovered,
              isOpen: isOpen
            }),
            title ? React.createElement(
              Title,
              { isHovered: isHovered },
              title
            ) : null,
            secondaryText ? React.createElement(
              Text,
              { isHovered: isHovered },
              secondaryText
            ) : null
          )
        )
      )
    );
  };

  return InlineMessage;
}(PureComponent);

InlineMessage.propTypes = {
  /** The elements to be displayed by the inline dialog. */
  children: PropTypes.node,
  /** Text to display first, bolded for emphasis. */
  title: PropTypes.string,
  /** Set the icon to be used before the title. Options are: connectivity,
  confirmation, info, warning, and error. */
  type: PropTypes.oneOf(types),
  /** Text to display second. */
  secondaryText: PropTypes.string,
  /** Position prop to be passed to the inline dialog. Determines where around
  the text the dialog is displayed. */
  position: InlineDialog.propTypes.position
};
InlineMessage.defaultProps = {
  type: defaultType,
  position: 'bottom left'
};
export default InlineMessage;
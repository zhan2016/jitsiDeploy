import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n    align-items: baseline;\n    background: ', ';\n    box-sizing: border-box;\n    box-shadow: ', ';\n    border-radius: ', ';\n    border-width: 0;\n    width: ', ';\n    color: ', ';\n    cursor: ', ';\n    display: inline-flex;\n    font-style: normal;\n    font-size: inherit;\n    height: ', ';\n    line-height: ', ';\n    margin: 0;\n    outline: ', ';\n    padding: ', ';\n    pointer-events: ', ';\n    text-align: center;\n    text-decoration: ', ';\n    transition-duration: ', ';\n    transition: ', ';\n    user-select: none;\n    vertical-align: ', ';\n    white-space: nowrap;\n\n    &::-moz-focus-inner {\n      border: 0;\n      margin: 0;\n      padding: 0;\n    }\n  '], ['\n    align-items: baseline;\n    background: ', ';\n    box-sizing: border-box;\n    box-shadow: ', ';\n    border-radius: ', ';\n    border-width: 0;\n    width: ', ';\n    color: ', ';\n    cursor: ', ';\n    display: inline-flex;\n    font-style: normal;\n    font-size: inherit;\n    height: ', ';\n    line-height: ', ';\n    margin: 0;\n    outline: ', ';\n    padding: ', ';\n    pointer-events: ', ';\n    text-align: center;\n    text-decoration: ', ';\n    transition-duration: ', ';\n    transition: ', ';\n    user-select: none;\n    vertical-align: ', ';\n    white-space: nowrap;\n\n    &::-moz-focus-inner {\n      border: 0;\n      margin: 0;\n      padding: 0;\n    }\n  ']);

import { css } from 'styled-components';
import { akGridSizeUnitless, akFontSizeDefault, akBorderRadius } from '@atlaskit/util-shared-styles';
import themeDefinitions from './themeDefinitions';

var akFontSizeUnitless = parseInt(akFontSizeDefault, 10);
var buttonHeight = akGridSizeUnitless * 4 / akFontSizeUnitless + 'em';
var compactButtonHeight = akGridSizeUnitless * 3 / akFontSizeUnitless + 'em';

var getState = function getState(_ref) {
  var disabled = _ref.disabled,
      isActive = _ref.isActive,
      isFocus = _ref.isFocus,
      isHover = _ref.isHover,
      isSelected = _ref.isSelected;

  if (disabled) return 'disabled';
  if (isSelected) return 'selected';
  if (isActive) return 'active';
  if (isHover) return 'hover';
  if (isFocus) return 'focus';
  return 'default';
};

export var getPropertyAppearance = function getPropertyAppearance(property) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var definitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : themeDefinitions;
  var appearance = props.appearance,
      theme = props.theme;
  var themes = definitions.themes,
      fallbacks = definitions.fallbacks;


  var themeStyles = themes[theme] || themes.default;
  var appearanceStyles = themeStyles[appearance] || themeStyles.default;
  var propertyStyles = appearanceStyles[property];

  if (!propertyStyles) {
    return fallbacks[property] || 'initial';
  }

  var state = getState(props);

  return propertyStyles[state] || propertyStyles.default || fallbacks[property];
};

export default function getButtonStyles(props) {
  /**
   * Variable styles
   */
  var cursor = 'default';
  var boxShadow = 'none';
  var height = buttonHeight;
  var lineHeight = buttonHeight;
  var outline = 'none';
  var padding = '0 ' + akGridSizeUnitless + 'px';
  var pointerEvents = 'auto';
  var transitionDuration = '0.1s, 0.15s';
  var transition = 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)';
  var verticalAlign = 'middle';
  var width = 'auto';

  /**
   * Appearance + Theme styles
   */
  var background = getPropertyAppearance('background', props);
  var color = getPropertyAppearance('color', props);
  var boxShadowColor = getPropertyAppearance('boxShadowColor', props);
  var textDecoration = getPropertyAppearance('textDecoration', props);

  // Spacing: Compact
  if (props.spacing === 'compact') {
    height = compactButtonHeight;
    lineHeight = compactButtonHeight;
  }

  // Spacing: None
  if (props.spacing === 'none') {
    height = 'auto';
    lineHeight = 'inherit';
    padding = '0';
    verticalAlign = 'baseline';
  }

  // Interaction: Hover
  if (props.isHover) {
    cursor = 'pointer';
    transition = 'background 0s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)';
  }

  // Interaction: Active
  if (props.isActive) {
    transitionDuration = '0s';
  }

  // Interaction: Focus
  if (props.isFocus) {
    boxShadow = '0 0 0 2px ' + boxShadowColor;
    outline = 'none';
    transitionDuration = '0s, 0.2s';
  }

  // Disabled
  if (props.disabled) {
    pointerEvents = 'none';
    cursor = 'not-allowed';
  }

  // Fit to parent width
  if (props.fit) {
    width = '100%';
  }

  return css(_templateObject, background, boxShadow, akBorderRadius, width, color, cursor, height, lineHeight, outline, padding, pointerEvents, textDecoration, transitionDuration, transition, verticalAlign);
}
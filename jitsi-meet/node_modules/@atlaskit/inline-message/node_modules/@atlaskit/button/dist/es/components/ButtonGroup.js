import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Children, cloneElement, PureComponent } from 'react';
import PropTypes from 'prop-types';
import Button from './Button';
import Group, { GroupItem } from '../styled/ButtonGroup';

function ValidateChildren(props, propName) {
  var prop = props[propName];

  var error = null;

  Children.forEach(prop, function (child) {
    if (child.type !== Button) {
      error = new Error('Children should be of type `Button`.');
    }
  });

  return error;
}

var ButtonGroup = function (_PureComponent) {
  _inherits(ButtonGroup, _PureComponent);

  function ButtonGroup() {
    _classCallCheck(this, ButtonGroup);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ButtonGroup.prototype.render = function render() {
    var _props = this.props,
        appearance = _props.appearance,
        children = _props.children;


    return React.createElement(
      Group,
      null,
      Children.map(children, function (child, idx) {
        return React.createElement(
          GroupItem,
          { key: idx },
          appearance ? cloneElement(child, { appearance: appearance }) : child
        );
      })
    );
  };

  return ButtonGroup;
}(PureComponent);

ButtonGroup.propTypes = {
  /** The appearance to apply to all buttons. */
  appearance: PropTypes.oneOf(['default', 'link', 'primary', 'subtle', 'subtle-link']),
  /** The buttons to render. */
  children: ValidateChildren
};
export default ButtonGroup;
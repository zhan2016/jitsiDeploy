import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Layer from '@atlaskit/layer';
import { getLayerPosition } from '../utils';
import Tip, { TooltipTrigger } from '../styled/Tooltip';

var TooltipStateless = function (_PureComponent) {
  _inherits(TooltipStateless, _PureComponent);

  function TooltipStateless() {
    var _temp, _this, _ret;

    _classCallCheck(this, TooltipStateless);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { isFlipped: false }, _this.handleLayerFlipChange = function (_ref) {
      var flipped = _ref.flipped;

      _this.setState({ isFlipped: flipped });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TooltipStateless.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        description = _props.description,
        isVisible = _props.isVisible,
        onMouseOut = _props.onMouseOut,
        onMouseOver = _props.onMouseOver,
        position = _props.position;
    var isFlipped = this.state.isFlipped;

    var tooltip = isVisible ? React.createElement(
      Tip,
      { isFlipped: isFlipped, position: position },
      description
    ) : null;

    return React.createElement(
      Layer,
      {
        autoPosition: true,
        content: tooltip,
        onFlippedChange: this.handleLayerFlipChange,
        position: getLayerPosition(position)
      },
      React.createElement(
        TooltipTrigger,
        { onMouseOver: onMouseOver, onMouseOut: onMouseOut },
        children
      )
    );
  };

  return TooltipStateless;
}(PureComponent);

TooltipStateless.propTypes = {
  children: PropTypes.node,
  description: PropTypes.string,
  isVisible: PropTypes.bool,
  onMouseOut: PropTypes.func,
  onMouseOver: PropTypes.func,
  position: PropTypes.oneOf(['bottom', 'left', 'right', 'top'])
};
TooltipStateless.defaultProps = {
  isVisible: false,
  onMouseOut: function onMouseOut() {},
  onMouseOver: function onMouseOver() {},
  position: 'bottom'
};
export default TooltipStateless;
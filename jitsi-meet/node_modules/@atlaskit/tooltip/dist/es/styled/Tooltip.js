import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['translateY(', 'px)'], ['translateY(', 'px)']),
    _templateObject2 = _taggedTemplateLiteral(['translateX(', 'px)'], ['translateX(', 'px)']),
    _templateObject3 = _taggedTemplateLiteral(['', ''], ['', '']),
    _templateObject4 = _taggedTemplateLiteral(['\n  animation: ', ' ', 's ', 's backwards;\n  background-color: ', ';\n  border-radius: ', 'px;\n  box-sizing: border-box;\n  color: ', ';\n  font-size: ', 'px;\n  line-height: ', ';\n  margin: ', 'px;\n  max-width: ', 'px;\n  padding: ', 'px ', 'px;\n  pointer-events: none;\n  white-space: nowrap;\n'], ['\n  animation: ', ' ', 's ', 's backwards;\n  background-color: ', ';\n  border-radius: ', 'px;\n  box-sizing: border-box;\n  color: ', ';\n  font-size: ', 'px;\n  line-height: ', ';\n  margin: ', 'px;\n  max-width: ', 'px;\n  padding: ', 'px ', 'px;\n  pointer-events: none;\n  white-space: nowrap;\n']),
    _templateObject5 = _taggedTemplateLiteral(['\n  display: inline-block;\n'], ['\n  display: inline-block;\n']);

/* eslint-disable no-confusing-arrow */

/* TODO: finish migrating constants from util-shared-styles */

import styled, { keyframes } from 'styled-components';
import { akAnimationMixins, akGridSizeUnitless } from '@atlaskit/util-shared-styles';

import { borderRadius, colors, gridSize, math, themed } from '@atlaskit/theme';

var createBold = akAnimationMixins.createBold,
    interpolate = akAnimationMixins.interpolate;

// common constants

var grid = akGridSizeUnitless / 2;
var fontSize = 3 * grid;

// animation constants
var animDistance = 3 * grid;
var animDelay = 0.1;
var animTime = animDelay + 1;

// properties to animate
var slideUp = {
  property: 'transform',
  value: interpolate(_templateObject, function (t) {
    return t;
  }),
  deltas: [{ from: animDistance, to: 0 }]
};
var slideDown = {
  property: 'transform',
  value: interpolate(_templateObject, function (t) {
    return t;
  }),
  deltas: [{ from: -animDistance, to: 0 }]
};
var slideLeft = {
  property: 'transform',
  value: interpolate(_templateObject2, function (t) {
    return t;
  }),
  deltas: [{ from: animDistance, to: 0 }]
};
var slideRight = {
  property: 'transform',
  value: interpolate(_templateObject2, function (t) {
    return t;
  }),
  deltas: [{ from: -animDistance, to: 0 }]
};
var fadeIn = {
  property: 'opacity',
  deltas: [{ from: 0, to: 1 }]
};

// positioning maps to create keyframes
var KEYFRAMES = {
  bottom: keyframes(_templateObject3, createBold([slideDown, fadeIn])),
  left: keyframes(_templateObject3, createBold([slideLeft, fadeIn])),
  right: keyframes(_templateObject3, createBold([slideRight, fadeIn])),
  top: keyframes(_templateObject3, createBold([slideUp, fadeIn]))
};
var KEYFRAMES_FLIPPED = {
  bottom: KEYFRAMES.top,
  left: KEYFRAMES.right,
  right: KEYFRAMES.left,
  top: KEYFRAMES.bottom
};
var getKeyframeName = function getKeyframeName(_ref) {
  var isFlipped = _ref.isFlipped,
      position = _ref.position;
  return isFlipped ? KEYFRAMES_FLIPPED[position] : KEYFRAMES[position];
};

var backgroundColor = themed({
  light: colors.N800,
  dark: colors.DN0
});
var textColor = themed({
  light: colors.N0,
  dark: colors.DN600
});

// apply all the things
export default styled.div(_templateObject4, getKeyframeName, animTime, animDelay, backgroundColor, borderRadius, textColor, fontSize, 4 * grid / fontSize, gridSize, math.multiply(gridSize, 52), math.divide(gridSize, 4), gridSize);

// The inline-block here is needed to keep the tooltip appearing in the correct position
// when nested inside a wider parent (see position: relative example).
export var TooltipTrigger = styled.div(_templateObject5);
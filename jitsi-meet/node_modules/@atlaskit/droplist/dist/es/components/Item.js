import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Radio from '@atlaskit/icon/glyph/radio';
import Checkbox from '@atlaskit/icon/glyph/checkbox';
import Tooltip from '@atlaskit/tooltip';

import { After, Before, Content, ContentWrapper, Description, InputWrapper } from '../styled/Item';
import { getInputBackground, getInputFill } from '../utils';

import Element from './Element';

var inputTypes = { checkbox: Checkbox, radio: Radio };

/* eslint-disable react/no-unused-prop-types */

var Item = function (_PureComponent) {
  _inherits(Item, _PureComponent);

  function Item() {
    var _temp, _this, _ret;

    _classCallCheck(this, Item);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      isHovered: false,
      isPressed: false
    }, _this.componentDidMount = function () {
      return document.addEventListener('mouseup', _this.handleMouseUp);
    }, _this.componentWillUnmount = function () {
      return document.removeEventListener('mouseup', _this.handleMouseUp);
    }, _this.guardedActivate = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onActivate = _this$props.onActivate;


      if (!isDisabled) onActivate({ item: _this, event: event });
    }, _this.handleClick = function (event) {
      return _this.guardedActivate(event);
    }, _this.handleKeyPress = function (event) {
      var keyIsValid = ['Enter', ' '].indexOf(event.key) > -1;

      if (keyIsValid) _this.guardedActivate(event);
    }, _this.handleMouseDown = function () {
      return _this.setState({ isPressed: true });
    }, _this.handleMouseUp = function () {
      return _this.setState({ isPressed: false });
    }, _this.handleMouseOut = function () {
      return _this.setState({ isHovered: false });
    }, _this.handleMouseOver = function () {
      return _this.setState({ isHovered: true });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Item.prototype.render = function render() {
    var props = this.props;
    var _state = this.state,
        isHovered = _state.isHovered,
        isPressed = _state.isPressed;


    var hasInput = ['checkbox', 'radio'].indexOf(props.type) > -1;
    var Input = inputTypes[props.type];

    var appearanceProps = {
      isActive: props.type === 'link' && props.isActive || props.type === 'option' && props.isSelected,
      isChecked: ['checkbox', 'radio'].indexOf(props.type) > -1 && props.isChecked,
      isDisabled: props.isDisabled,
      isFocused: props.isFocused,
      isHidden: props.isHidden,
      isHovered: isHovered,
      isPressed: isPressed,
      isSelected: props.type === 'option' && props.isSelected,
      isPrimary: props.appearance === 'primary'
    };

    var element = React.createElement(
      Element,
      _extends({}, appearanceProps, {
        handleClick: this.handleClick,
        handleKeyPress: this.handleKeyPress,
        handleMouseOut: this.handleMouseOut,
        handleMouseOver: this.handleMouseOver,
        handleMouseUp: this.handleMouseUp,
        handleMouseDown: this.handleMouseDown,
        href: props.href,
        target: props.target,
        title: props.title,
        type: props.type
      }),
      hasInput && React.createElement(
        InputWrapper,
        appearanceProps,
        React.createElement(Input, {
          label: '',
          primaryColor: getInputBackground(appearanceProps),
          secondaryColor: getInputFill(appearanceProps),
          size: 'medium'
        })
      ),
      !!props.elemBefore && React.createElement(
        Before,
        null,
        props.elemBefore
      ),
      React.createElement(
        ContentWrapper,
        null,
        React.createElement(
          Content,
          { allowMultiline: this.context.shouldAllowMultilineItems },
          props.children
        ),
        !!props.description && React.createElement(
          Description,
          null,
          props.description
        )
      ),
      !!props.elemAfter && React.createElement(
        After,
        null,
        props.elemAfter
      )
    );

    return React.createElement(
      'span',
      { role: 'presentation' },
      props.tooltipDescription ? React.createElement(
        Tooltip,
        { description: props.tooltipDescription, position: props.tooltipPosition },
        element
      ) : element
    );
  };

  return Item;
}(PureComponent);

Item.propTypes = {
  appearance: PropTypes.oneOf(['default', 'primary']),
  children: PropTypes.node,
  description: PropTypes.string,
  elemAfter: PropTypes.node,
  elemBefore: PropTypes.node,
  href: PropTypes.string,
  isActive: PropTypes.bool,
  isChecked: PropTypes.bool,
  isDisabled: PropTypes.bool,
  isFocused: PropTypes.bool,
  isHidden: PropTypes.bool,
  isSelected: PropTypes.bool,
  onActivate: PropTypes.func,
  target: PropTypes.string,
  title: PropTypes.string,
  tooltipDescription: PropTypes.string,
  tooltipPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),
  type: PropTypes.oneOf(['link', 'radio', 'checkbox', 'option'])
};
Item.defaultProps = {
  appearance: 'default',
  children: null,
  description: '',
  elemAfter: null,
  elemBefore: null,
  href: null,
  isActive: false,
  isChecked: false,
  isDisabled: false,
  isFocused: false,
  isHidden: false,
  isSelected: false,
  itemContext: 'menu',
  onActivate: function onActivate() {},
  target: null,
  title: null,
  tooltipDescription: null,
  tooltipPosition: 'right',
  type: 'link'
};
Item.contextTypes = {
  shouldAllowMultilineItems: PropTypes.bool
};
export default Item;
import _Object$assign from 'babel-runtime/core-js/object/assign';
import { computeEnumValue } from './attributes';

/* Helper function for creating new extensions to existing properties */
function prop(def) {
  return function createNewProp() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.unshift({}, def);
    return _Object$assign.apply(Object, args);
  };
}

/**
  This property extension can be used with skate.
  Usage:
  ```
  props: {
      respondsTo: props.enum({values: ['toggle', 'hover'],
      missingDefault: 'toggle',
      invalidDefault: 'toggle'})({

      })
  }
  ```
 */
function enumeration(enumOptions) {
  return prop({
    coerce: function coerce(value) {
      return computeEnumValue(enumOptions, value);
    },
    default: enumOptions.missingDefault,
    /* if the prop is an attribute, also add 'initial' with the default value so it get's set too*/
    initial: enumOptions.attribute ? enumOptions.missingDefault : undefined,
    deserialize: function deserialize(value) {
      return value === null ? undefined : value;
    },
    serialize: function serialize(value) {
      return typeof value === 'undefined' ? value : String(value);
    }
  });
}

export default enumeration;
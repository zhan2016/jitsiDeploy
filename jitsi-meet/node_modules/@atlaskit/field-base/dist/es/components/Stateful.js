import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import FieldBaseStateless from './Stateless';
//
var ON_BLUR_KEY = 'onBlurKey';
var ON_CONTENT_BLUR_KEY = 'onContentBlurKey';

function waitForRender(cb) {
  // Execute the callback after any upcoming render calls in the execution queue
  setTimeout(cb, 0);
}

var FieldBase = function (_PureComponent) {
  _inherits(FieldBase, _PureComponent);

  function FieldBase() {
    var _temp, _this, _ret;

    _classCallCheck(this, FieldBase);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      isFocused: _this.props.defaultIsFocused,
      isDialogFocused: false,
      shouldIgnoreNextDialogBlur: false
    }, _this.onFocus = function (e) {
      _this.setState({ isFocused: true });
      _this.props.onFocus(e);
      // Escape from a possible race-condition when blur and focus happen one by one
      // (otherwise the dialog might be left closed)
      _this.cancelSchedule(ON_BLUR_KEY);
    }, _this.onBlur = function (e) {
      // Because the blur event fires before the focus event, we want to make sure that we don't
      // render and close the dialog before we can check if the dialog is focused.
      _this.reschedule(ON_BLUR_KEY, function () {
        return _this.setState({ isFocused: false });
      });
      _this.props.onBlur(e);
    }, _this.onContentFocus = function () {
      if (_this.state.isDialogFocused) {
        // If we are tabbing between two elements in the warning dialog, we need to prevent the
        // dialog from closing.
        _this.setState({ shouldIgnoreNextDialogBlur: true });
      } else {
        _this.setState({ isDialogFocused: true });
      }

      // Escape from a possible race-condition when blur and focus happen one by one
      // (otherwise the dialog might be left closed)
      _this.cancelSchedule(ON_CONTENT_BLUR_KEY);
    }, _this.onContentBlur = function () {
      waitForRender(function () {
        if (_this.state.shouldIgnoreNextDialogBlur) {
          // Ignore the blur event if we are still focused in the dialog.
          _this.setState({ shouldIgnoreNextDialogBlur: false });
        } else {
          _this.setState({ isDialogFocused: false });
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  FieldBase.prototype.cancelSchedule = function cancelSchedule(key) {
    this.timers = this.timers || {};
    if (this.timers[key]) {
      clearTimeout(this.timers[key]);
      delete this.timers[key];
    }
  };

  FieldBase.prototype.reschedule = function reschedule(key, callback) {
    var _this2 = this;

    // Use reschedule (not just schedule) to avoid race conditions when multiple blur events
    // happen one by one.
    this.timers = this.timers || {};
    this.cancelSchedule(key);
    this.timers[key] = setTimeout(function () {
      callback();
      _this2.cancelSchedule(key);
    }, 0);
  };

  FieldBase.prototype.render = function render() {
    var _state = this.state,
        isFocused = _state.isFocused,
        isDialogFocused = _state.isDialogFocused;

    return React.createElement(FieldBaseStateless, _extends({}, this.props, {
      isDialogOpen: isFocused || isDialogFocused,
      isFocused: isFocused,
      onBlur: this.onBlur,
      onFocus: this.onFocus,
      onDialogFocus: this.onContentFocus,
      onDialogBlur: this.onContentBlur
    }));
  };

  return FieldBase;
}(PureComponent);

FieldBase.propTypes = {
  /** focus the element when initially rendered */
  defaultIsFocused: PropTypes.bool,
  /** focus event handler */
  onFocus: PropTypes.func,
  /** blur event handler */
  onBlur: PropTypes.func
};
FieldBase.defaultProps = {
  defaultIsFocused: false,
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
export default FieldBase;
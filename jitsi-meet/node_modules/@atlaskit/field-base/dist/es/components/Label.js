import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';

import { LabelWrapper, RequiredIndicator, LabelInner } from '../styled/Label';

var Label = function (_PureComponent) {
  _inherits(Label, _PureComponent);

  function Label() {
    _classCallCheck(this, Label);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  /* eslint-disable jsx-a11y/no-static-element-interactions */
  Label.prototype.render = function render() {
    var _props = this.props,
        appearance = _props.appearance,
        children = _props.children,
        htmlFor = _props.htmlFor,
        isFirstChild = _props.isFirstChild,
        isLabelHidden = _props.isLabelHidden,
        isDisabled = _props.isDisabled,
        isRequired = _props.isRequired,
        label = _props.label,
        onClick = _props.onClick;


    return React.createElement(
      LabelWrapper,
      { htmlFor: htmlFor },
      React.createElement(
        LabelInner,
        {
          isHidden: isLabelHidden,
          inlineEdit: appearance === 'inline-edit',
          firstChild: isFirstChild,
          isDisabled: isDisabled
        },
        React.createElement(
          'span',
          { onClick: onClick },
          label
        ),
        isRequired ? React.createElement(
          RequiredIndicator,
          { role: 'presentation' },
          '*'
        ) : null
      ),
      children
    );
  };

  return Label;
}(PureComponent);

Label.propTypes = {
  /** the label text to display */
  label: PropTypes.string.isRequired,
  /** whether to hide the label */
  isLabelHidden: PropTypes.bool,
  /** onclick handler */
  onClick: PropTypes.func,
  /** show a style indicating that the label is for a required field */
  isRequired: PropTypes.bool,
  /** Sets whether the disabled style is applied to the label */
  isDisabled: PropTypes.bool,
  /** the labels control element */
  htmlFor: PropTypes.string,
  /** any children to render, displayed underneath the label */
  children: PropTypes.node,
  /** controls the appearance of the label */
  appearance: PropTypes.oneOf(['default', 'inline-edit']),
  /** controls the top margin of the label */
  isFirstChild: PropTypes.bool
};
Label.defaultProps = {
  appearance: 'default'
};
export default Label;
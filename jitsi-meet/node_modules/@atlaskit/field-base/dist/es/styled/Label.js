import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['padding: ', 'px ', 'px ', 'px ', 'px'], ['padding: ', 'px ', 'px ', 'px ', 'px']),
    _templateObject2 = _taggedTemplateLiteral(['\n  display: block;\n'], ['\n  display: block;\n']),
    _templateObject3 = _taggedTemplateLiteral(['\n  color: ', ';\n  font-size: ', 'px;\n  font-weight: 600;\n  line-height: ', ';\n  ', ';\n\n  ', '\n'], ['\n  color: ', ';\n  font-size: ', 'px;\n  font-weight: 600;\n  line-height: ', ';\n  ', ';\n\n  ', '\n']),
    _templateObject4 = _taggedTemplateLiteral(['\n  color: ', ';\n  padding-left: 2px;\n'], ['\n  color: ', ';\n  padding-left: 2px;\n']);

import styled, { css } from 'styled-components';
import { colors, themed, gridSize } from '@atlaskit/theme';

var spacing = gridSize();
var fontSize = 12;
var innerHeight = spacing * 2; // 16px
var lineHeight = innerHeight / fontSize;

var getPadding = function getPadding(_ref) {
  var firstChild = _ref.firstChild,
      inlineEdit = _ref.inlineEdit;

  var right = 0;
  var bottom = spacing / 2;
  var left = 0;
  var top = spacing * 2.5;

  if (inlineEdit) {
    bottom = 0;
    left = spacing;
    top = spacing;
  }
  if (firstChild) {
    top = spacing / 2;
  }

  return css(_templateObject, top, right, bottom, left);
};

export var LabelWrapper = styled.label(_templateObject2);

var getColor = themed({ light: colors.N200, dark: colors.DN90 });
var getDisabledColor = themed({ light: colors.N60, dark: colors.DN300 });

export var LabelInner = styled.div(_templateObject3, function (props) {
  return props.isDisabled ? getDisabledColor(props) : getColor(props);
}, fontSize, lineHeight, getPadding, function (p) {
  return p.isHidden && 'display: none;';
});

export var RequiredIndicator = styled.span(_templateObject4, colors.red);
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import { TransitionGroup } from 'react-transition-group';

import SpinnerGlyph from './SpinnerGlyph';

var Spinner = function (_PureComponent) {
  _inherits(Spinner, _PureComponent);

  function Spinner() {
    _classCallCheck(this, Spinner);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Spinner.prototype.render = function render() {
    var _props = this.props,
        isCompleting = _props.isCompleting,
        glyphProps = _objectWithoutProperties(_props, ['isCompleting']);

    return React.createElement(
      TransitionGroup,
      {
        component: 'div',
        style: { display: 'inline-block' }
      },
      !isCompleting ? React.createElement(SpinnerGlyph, _extends({ key: Date.now() }, glyphProps)) : null
    );
  };
  // eslint-disable-next-line react/sort-comp


  return Spinner;
}(PureComponent);

Spinner.propTypes = {
  /** Time in milliseconds after component mount before spinner is visible. */delay: _PropTypes.number.isRequired /** Set the spinner color to white, for use in dark-themed UIs. */,
  invertColor: _PropTypes.bool.isRequired /** Handler for once the spinner has completed its outro animation */,
  onComplete: _PropTypes.func.isRequired /** Size of the spinner. */,
  size: _PropTypes.oneOfType([_PropTypes.oneOf(['small']), _PropTypes.oneOf(['medium']), _PropTypes.oneOf(['large']), _PropTypes.oneOf(['xlarge']), _PropTypes.number]).isRequired,
  /** Whether the process is complete and the spinner should leave */isCompleting: _PropTypes.bool.isRequired
};
Spinner.defaultProps = {
  delay: 100,
  isCompleting: false,
  invertColor: false,
  onComplete: function onComplete() {},
  size: 'small'
};
export default Spinner;
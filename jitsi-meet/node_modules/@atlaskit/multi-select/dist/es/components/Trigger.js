import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import { FieldBaseStateless } from '@atlaskit/field-base';
import TagGroup from '@atlaskit/tag-group';
import Tag from '@atlaskit/tag';
import ExpandIcon from '@atlaskit/icon/glyph/expand';
import Spinner from '@atlaskit/spinner';

import { Content, Expand, Input, TriggerDiv } from '../styled/Trigger';
import { mapAppearanceToFieldBase } from '../internal/appearances';
import ItemShape from '../internal/ItemShape';

var itemShape = ItemShape.propTypes;

// =============================================================
// NOTE: Duplicated in ./internal/appearances until docgen can follow imports.
// -------------------------------------------------------------
// DO NOT update values here without updating the other.
// =============================================================

var appearances = {
  values: ['default', 'subtle'],
  default: 'default'
};

var Trigger = function (_PureComponent) {
  _inherits(Trigger, _PureComponent);

  function Trigger() {
    _classCallCheck(this, Trigger);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  // disabled because all of the accessibility is handled manually
  /* eslint-disable jsx-a11y/no-static-element-interactions */
  Trigger.prototype.render = function render() {
    var _props = this.props,
        appearance = _props.appearance,
        filterValue = _props.filterValue,
        handleItemRemove = _props.handleItemRemove,
        handleOnChange = _props.handleOnChange,
        handleTriggerClick = _props.handleTriggerClick,
        inputRefFunction = _props.inputRefFunction,
        icon = _props.icon,
        isDisabled = _props.isDisabled,
        isFocused = _props.isFocused,
        isInvalid = _props.isInvalid,
        invalidMessage = _props.invalidMessage,
        isLoading = _props.isLoading,
        isRequired = _props.isRequired,
        onBlur = _props.onBlur,
        onFocus = _props.onFocus,
        placeholder = _props.placeholder,
        selectedItems = _props.selectedItems,
        tagGroupRefFunction = _props.tagGroupRefFunction;


    return React.createElement(
      FieldBaseStateless,
      {
        appearance: mapAppearanceToFieldBase(appearance),
        isDisabled: isDisabled,
        isFitContainerWidthEnabled: true,
        isDialogOpen: isFocused,
        isFocused: isFocused,
        isInvalid: isInvalid,
        invalidMessage: invalidMessage,
        isPaddingDisabled: true,
        isRequired: isRequired,
        onBlur: onBlur,
        onFocus: onFocus
      },
      React.createElement(
        TriggerDiv,
        {
          isDisabled: isDisabled,
          onClick: handleTriggerClick
        },
        React.createElement(
          Content,
          null,
          React.createElement(
            TagGroup,
            { ref: tagGroupRefFunction },
            selectedItems.map(function (item) {
              return React.createElement(Tag, {
                appearance: item.tag ? item.tag.appearance : undefined,
                elemBefore: item.tag ? item.tag.elemBefore : undefined,
                key: item.value,
                onAfterRemoveAction: function onAfterRemoveAction() {
                  handleItemRemove(item);
                },
                removeButtonText: isDisabled ? null : item.content + ', remove',
                text: item.content
              });
            }),
            isDisabled ? null : React.createElement(Input, {
              disabled: isDisabled,
              onChange: handleOnChange,
              placeholder: placeholder,
              innerRef: inputRefFunction,
              type: 'text',
              value: filterValue
            })
          )
        ),
        React.createElement(
          Expand,
          null,
          isFocused && isLoading ? React.createElement(Spinner, null) : icon
        )
      )
    );
  };
  /* eslint-enable jsx-a11y/no-static-element-interactions */


  return Trigger;
}(PureComponent);

Trigger.propTypes = {
  appearance: PropTypes.oneOf(appearances.values),
  filterValue: PropTypes.string,
  handleItemRemove: PropTypes.func,
  handleOnChange: PropTypes.func,
  handleTriggerClick: PropTypes.func,
  inputRefFunction: PropTypes.func,
  isDisabled: PropTypes.bool,
  isFocused: PropTypes.bool,
  isInvalid: PropTypes.bool,
  invalidMessage: PropTypes.node,
  isLoading: PropTypes.bool,
  isRequired: PropTypes.bool,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  placeholder: PropTypes.string,
  selectedItems: PropTypes.arrayOf(PropTypes.shape(itemShape)),
  tagGroupRefFunction: PropTypes.func,
  icon: PropTypes.node
};
Trigger.defaultProps = {
  isDisabled: false,
  isLoading: false,
  onClick: function onClick() {},
  icon: React.createElement(ExpandIcon, { label: '' })
};
export default Trigger;
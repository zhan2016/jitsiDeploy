import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import Blanket from '@atlaskit/blanket';

import ModalWrapper from '../styled/ModalWrapper';
import ModalPositioner from '../styled/ModalPositioner';
import ModalContainer from '../styled/ModalContainer';
import HeaderFooterWrapper from '../styled/HeaderFooterWrapper';
import ContentContainer from '../styled/ContentContainer';
import Children from '../styled/Children';
import KeylineMask from '../styled/KeylineMask';

import { WIDTH_ENUM } from '../shared-variables';

var ModalDialog = function (_PureComponent) {
  _inherits(ModalDialog, _PureComponent);

  function ModalDialog() {
    var _temp, _this, _ret;

    _classCallCheck(this, ModalDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      isAnimating: false
    }, _this.componentDidMount = function () {
      document.addEventListener('keydown', _this.handleKeyDown);
    }, _this.componentWillReceiveProps = function (nextProps) {
      if (_this.props.isOpen !== nextProps.isOpen) {
        _this.setState({ isAnimating: true });
      }
    }, _this.componentWillUnmount = function () {
      document.removeEventListener('keydown', _this.handleKeyDown);
    }, _this.getCustomWidth = function () {
      return WIDTH_ENUM.values.indexOf(_this.props.width) === -1 ? { style: { width: _this.props.width } } : {};
    }, _this.dismissModal = function (e) {
      if (_this.props.isOpen) {
        _this.props.onDialogDismissed(e);
      }
    }, _this.handleAnimationEnd = function () {
      _this.setState({ isAnimating: false });
    }, _this.handleKeyDown = function (e) {
      var escapeKeyCode = 27;
      if (e.keyCode === escapeKeyCode) {
        _this.dismissModal(e);
      }
    }, _this.handlePositionerDirectClick = function (e) {
      var target = e.target;

      if (target && target === _this.modalPositionerRef) {
        _this.dismissModal(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // when the isOpen prop is changed, ModalPositioner will detect the change and trigger an
  // animation immediately, so we set isAnimating in state here.


  // If a custom width (number of percentage) is supplied, set inline style


  // Helper function to guard the onDialogDismissed prop function. Saved doing the same isOpen
  // check in multiple places.


  // Once the ModalPositioner animation finishes, set isAnimating back to false.


  // Detects click directly on the full-height modal container, to make sure that clicks in that
  // blanket region trigger onDialogDismissed as expected.


  ModalDialog.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        header = _props.header,
        isOpen = _props.isOpen,
        children = _props.children,
        footer = _props.footer,
        width = _props.width;


    var hasHeader = !!header;
    var hasFooter = !!footer;

    var optionalHeader = hasHeader ? React.createElement(
      HeaderFooterWrapper,
      { headerOrFooter: 'header' },
      header
    ) : null;

    var optionalFooter = hasFooter ? React.createElement(
      HeaderFooterWrapper,
      { headerOrFooter: 'footer' },
      footer
    ) : null;

    var headerKeylineMask = hasHeader ? React.createElement(KeylineMask, { headerOrFooter: 'header' }) : null;

    var footerKeylineMask = hasFooter ? React.createElement(KeylineMask, { headerOrFooter: 'footer' }) : null;

    return React.createElement(
      ModalWrapper,
      { isOpen: isOpen },
      React.createElement(Blanket, { canClickThrough: !isOpen, isTinted: isOpen, onBlanketClicked: this.dismissModal }),
      this.state.isAnimating || isOpen ? React.createElement(
        ModalPositioner,
        _extends({
          innerRef: function innerRef(ref) {
            _this2.modalPositionerRef = ref;
          },
          isOpen: isOpen,
          width: width
        }, this.getCustomWidth(), {
          onAnimationEnd: this.handleAnimationEnd,
          onClick: this.handlePositionerDirectClick
        }),
        React.createElement(
          ModalContainer,
          { height: this.props.height },
          optionalHeader,
          React.createElement(
            ContentContainer,
            { hasHeader: hasHeader, hasFooter: hasFooter },
            headerKeylineMask,
            React.createElement(
              Children,
              null,
              children
            ),
            footerKeylineMask
          ),
          optionalFooter
        )
      ) : null
    );
  };

  return ModalDialog;
}(PureComponent);

ModalDialog.propTypes = {
  /** Determines whether the modal should be shown or not. */
  isOpen: PropTypes.bool,
  /** Elements to render in the header of the modal. */
  header: PropTypes.node,
  /** Elements to render in the main body of the modal. */
  children: PropTypes.node,
  /** Elements to render in the footer of the moda.l */
  footer: PropTypes.node,
  /** Height of the modal. If not set, the modal grows to fit the content until it
  runs out of vertical space, at which point scrollbars appear. If a number is
  provided, the height is set to that number in pixels. A string including pixels,
  or a percentage, will be directly applied as a style. Several size options are
  also recognised. */
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /** Width of the modal. This can be provided in three different ways.
  If a number is provided, the width is set to that number in pixels.
  A string including pixels, or a percentage, will be directly applied as a style.
  Several size options are also recognised. */
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.oneOf(WIDTH_ENUM.values)]),
  /** Function to be called when esc key is pressed, or a click occurs outside
  the modal. */
  onDialogDismissed: PropTypes.func
};
ModalDialog.defaultProps = {
  isOpen: false,
  onDialogDismissed: function onDialogDismissed() {},
  width: WIDTH_ENUM.defaultValue
};
export default ModalDialog;
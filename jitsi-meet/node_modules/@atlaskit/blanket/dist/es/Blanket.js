import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import Container from './styled/Container';

var Blanket = function (_PureComponent) {
  _inherits(Blanket, _PureComponent);

  function Blanket() {
    _classCallCheck(this, Blanket);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Blanket.prototype.render = function render() {
    var _props = this.props,
        canClickThrough = _props.canClickThrough,
        isTinted = _props.isTinted,
        onBlanketClicked = _props.onBlanketClicked;

    var onClick = canClickThrough ? null : onBlanketClicked;
    var containerProps = { canClickThrough: canClickThrough, isTinted: isTinted, onClick: onClick };

    // TODO make sure that the div onClick is accessible
    return React.createElement(Container, containerProps);
  };

  return Blanket;
}(PureComponent);

Blanket.propTypes = {
  /** Whether mouse events can pierce the blanket. If true, onBlanketClicked will not be fired */
  canClickThrough: PropTypes.bool,
  /** Whether the blanket has a tinted background color. */
  isTinted: PropTypes.bool,
  /** Handler function to be called when the blanket is clicked */
  onBlanketClicked: PropTypes.func
};
Blanket.defaultProps = {
  canClickThrough: false,
  isTinted: false,
  onBlanketClicked: function onBlanketClicked() {}
};
export default Blanket;
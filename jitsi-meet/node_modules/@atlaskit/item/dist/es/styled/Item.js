import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n    background-color: ', ';\n    color: ', ';\n    text-decoration: none;\n\n    &:focus {\n      color: ', ';\n    }\n  '], ['\n    background-color: ', ';\n    color: ', ';\n    text-decoration: none;\n\n    &:focus {\n      color: ', ';\n    }\n  ']),
    _templateObject2 = _taggedTemplateLiteral(['\n    padding: ', 'px ', 'px ', 'px ', 'px;\n  '], ['\n    padding: ', 'px ', 'px ', 'px ', 'px;\n  ']),
    _templateObject3 = _taggedTemplateLiteral(['\n    height: ', 'px;\n  '], ['\n    height: ', 'px;\n  ']),
    _templateObject4 = _taggedTemplateLiteral(['\n      ', '\n      /* e200 but without zindex */\n      /* using the same colour for all themes */\n      box-shadow: 0 4px 8px -2px ', ', 0 0 1px ', ';\n    '], ['\n      ', '\n      /* e200 but without zindex */\n      /* using the same colour for all themes */\n      box-shadow: 0 4px 8px -2px ', ', 0 0 1px ', ';\n    ']),
    _templateObject5 = _taggedTemplateLiteral(['\n    &:focus {\n      box-shadow: 0 0 0 2px ', ' inset;\n      text-decoration: none;\n    }\n  '], ['\n    &:focus {\n      box-shadow: 0 0 0 2px ', ' inset;\n      text-decoration: none;\n    }\n  ']),
    _templateObject6 = _taggedTemplateLiteral(['\n      cursor: not-allowed;\n      ', '\n      ', '\n    '], ['\n      cursor: not-allowed;\n      ', '\n      ', '\n    ']),
    _templateObject7 = _taggedTemplateLiteral(['\n      ', '\n\n      &:hover {\n        ', '\n      }\n\n      &:active {\n        ', '\n      }\n\n      ', '\n    '], ['\n      ', '\n\n      &:hover {\n        ', '\n      }\n\n      &:active {\n        ', '\n      }\n\n      ', '\n    ']),
    _templateObject8 = _taggedTemplateLiteral(['\n    &:hover {\n      ', '\n    }\n\n    &:active {\n      ', '\n    }\n\n    ', '\n  '], ['\n    &:hover {\n      ', '\n    }\n\n    &:active {\n      ', '\n    }\n\n    ', '\n  ']),
    _templateObject9 = _taggedTemplateLiteral(['\n  && {\n    align-items: center;\n    border-radius: ', 'px;\n    box-sizing: border-box;\n    cursor: pointer;\n    display: ', ';\n    flex: none;\n    ', '\n    ', '\n    ', '\n    ', '\n\n    &:focus {\n      /* focus shadow drawn by getInteractiveStyles */\n\n      outline: none;\n      /* relative position prevents bgcolor of a hovered element from\n      obfuscating focus ring of a focused sibling element */\n      position: relative;\n    }\n  }\n'], ['\n  && {\n    align-items: center;\n    border-radius: ', 'px;\n    box-sizing: border-box;\n    cursor: pointer;\n    display: ', ';\n    flex: none;\n    ', '\n    ', '\n    ', '\n    ', '\n\n    &:focus {\n      /* focus shadow drawn by getInteractiveStyles */\n\n      outline: none;\n      /* relative position prevents bgcolor of a hovered element from\n      obfuscating focus ring of a focused sibling element */\n      position: relative;\n    }\n  }\n']),
    _templateObject10 = _taggedTemplateLiteral(['', ''], ['', '']);

import styled, { css } from 'styled-components';
import { colors } from '@atlaskit/theme';
import { getThemeStyle, themeNamespace } from '../util/theme';

var getItemState = function getItemState(stateName) {
  return function (_ref) {
    var theme = _ref.theme;

    var stateStyles = getThemeStyle(theme[themeNamespace], stateName);
    return css(_templateObject, stateStyles.background, stateStyles.text, stateStyles.text);
  };
};

var getPadding = function getPadding(_ref2) {
  var isCompact = _ref2.isCompact,
      theme = _ref2.theme;

  var paddingKey = isCompact ? 'compact' : 'default';

  var _getThemeStyle = getThemeStyle(theme[themeNamespace], paddingKey, 'padding'),
      _getThemeStyle$bottom = _getThemeStyle.bottom,
      bottom = _getThemeStyle$bottom === undefined ? 0 : _getThemeStyle$bottom,
      _getThemeStyle$left = _getThemeStyle.left,
      left = _getThemeStyle$left === undefined ? 0 : _getThemeStyle$left,
      _getThemeStyle$right = _getThemeStyle.right,
      right = _getThemeStyle$right === undefined ? 0 : _getThemeStyle$right,
      _getThemeStyle$top = _getThemeStyle.top,
      top = _getThemeStyle$top === undefined ? 0 : _getThemeStyle$top;

  return css(_templateObject2, top, right, bottom, left);
};

var getHeightStyles = function getHeightStyles(_ref3) {
  var isCompact = _ref3.isCompact,
      theme = _ref3.theme;

  var heightKey = isCompact ? 'compact' : 'default';
  var height = getThemeStyle(theme[themeNamespace], heightKey, 'height');
  return height ? css(_templateObject3, height) : '';
};

// This function is responsible for drawing any focus styles for the element
var getInteractiveStyles = function getInteractiveStyles(_ref4) {
  var theme = _ref4.theme,
      isDisabled = _ref4.isDisabled,
      isDragging = _ref4.isDragging,
      isSelected = _ref4.isSelected;

  if (isDragging) {
    return css(_templateObject4, getItemState('dragging'), colors.N60A, colors.N60A);
  }

  var standardFocus = css(_templateObject5, getThemeStyle(theme[themeNamespace], 'outline', 'focus'));

  if (isDisabled) {
    return css(_templateObject6, getItemState('disabled'), standardFocus);
  }

  if (isSelected) {
    return css(_templateObject7, getItemState('selected'), getItemState('hover'), getItemState('active'), standardFocus);
  }

  return css(_templateObject8, getItemState('hover'), getItemState('active'), standardFocus);
};

// This is the main item style. It is defined as a basic style variable so it can
// later be applied to different component types (span / a / custom link component)

export var ItemBase = function ItemBase(_ref5) {
  var theme = _ref5.theme;
  return css(_templateObject9, getThemeStyle(theme[themeNamespace], 'borderRadius'), function (_ref6) {
    var isHidden = _ref6.isHidden;
    return isHidden ? 'none' : 'flex';
  }, getItemState('default'), getPadding, getInteractiveStyles, getHeightStyles);
};

// Given some optional link-related props, returns the relevant styled
// component. For links, it styles the linkComponent if provided, otherwise
// falling back to a styled <a> tag. If no href is present, a styled <span>
// is returned. When we upgrade to styled-components@2.x we will be able to
// simplify this by taking advantage of the withComponent() functionality.
var styledRootElement = function styledRootElement(_ref7) {
  var href = _ref7.href,
      linkComponent = _ref7.linkComponent;

  if (href) {
    return linkComponent ? styled(linkComponent)(_templateObject10, ItemBase) : styled.a(_templateObject10, ItemBase);
  }
  return styled.span(_templateObject10, ItemBase);
};

export default styledRootElement;
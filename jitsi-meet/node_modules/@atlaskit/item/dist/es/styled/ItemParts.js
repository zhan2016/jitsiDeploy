import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  display: flex;\n  margin: 0 2px;\n'], ['\n  display: flex;\n  margin: 0 2px;\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n  align-items: center;\n  display: flex;\n  flex-shrink: 0;\n'], ['\n  align-items: center;\n  display: flex;\n  flex-shrink: 0;\n']),
    _templateObject3 = _taggedTemplateLiteral(['\n    margin-right: ', 'px;\n  '], ['\n    margin-right: ', 'px;\n  ']),
    _templateObject4 = _taggedTemplateLiteral(['\n  ', '\n'], ['\n  ', '\n']),
    _templateObject5 = _taggedTemplateLiteral(['\n    margin-left: ', 'px;\n  '], ['\n    margin-left: ', 'px;\n  ']),
    _templateObject6 = _taggedTemplateLiteral(['\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0;\n  overflow: hidden;\n\n  &:first-child { margin: 0; }\n'], ['\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0;\n  overflow: hidden;\n\n  &:first-child { margin: 0; }\n']),
    _templateObject7 = _taggedTemplateLiteral(['\n  display: block;\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: ', ';\n  line-height: ', ';\n'], ['\n  display: block;\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: ', ';\n  line-height: ', ';\n']),
    _templateObject8 = _taggedTemplateLiteral(['\n      color: ', ';\n    '], ['\n      color: ', ';\n    ']),
    _templateObject9 = _taggedTemplateLiteral(['\n    color: ', ';\n\n    // This detects hover on the grandparent. Saves us having to maintain isHovered\n    // state in the grandparent.\n    *:hover > * > & {\n      color: ', ';\n    }\n\n    *:active > * > & {\n      color: ', ';\n    }\n  '], ['\n    color: ', ';\n\n    // This detects hover on the grandparent. Saves us having to maintain isHovered\n    // state in the grandparent.\n    *:hover > * > & {\n      color: ', ';\n    }\n\n    *:active > * > & {\n      color: ', ';\n    }\n  ']),
    _templateObject10 = _taggedTemplateLiteral(['\n    font-size: ', 'px;\n    line-height: ', ';\n  '], ['\n    font-size: ', 'px;\n    line-height: ', ';\n  ']),
    _templateObject11 = _taggedTemplateLiteral(['\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  ', '\n  ', '\n'], ['\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  ', '\n  ', '\n']);

import styled, { css } from 'styled-components';
import { fontSize } from '@atlaskit/theme';
import { getThemeStyle, themeNamespace, smallFontSize, compactSmallFontSize, compactLineHeight } from '../util/theme';

// Checkbox/Radio wrapper -- sits left of the children
export var InputWrapper = styled.span(_templateObject);

// Elements injected before/after the children
var BeforeAfterBase = styled.span(_templateObject2);

var getBeforeSpacing = function getBeforeSpacing(_ref) {
  var isCompact = _ref.isCompact,
      theme = _ref.theme;

  var spaceKey = isCompact ? 'compact' : 'default';
  var space = getThemeStyle(theme[themeNamespace], spaceKey, 'beforeItemSpacing');
  return css(_templateObject3, space);
};
export var Before = styled(BeforeAfterBase)(_templateObject4, getBeforeSpacing);

var getAfterSpacing = function getAfterSpacing(_ref2) {
  var isCompact = _ref2.isCompact,
      theme = _ref2.theme;

  var spaceKey = isCompact ? 'compact' : 'default';
  var space = getThemeStyle(theme[themeNamespace], spaceKey, 'afterItemSpacing');
  return css(_templateObject5, space);
};
export var After = styled(BeforeAfterBase)(_templateObject4, getAfterSpacing);

// Alignment and layout for the children
export var ContentWrapper = styled.span(_templateObject6);

export var Content = styled.span(_templateObject7, function (_ref3) {
  var allowMultiline = _ref3.allowMultiline;
  return allowMultiline ? 'normal' : 'nowrap';
}, 16 / fontSize());

var getColorStyle = function getColorStyle(_ref4) {
  var isDisabled = _ref4.isDisabled,
      theme = _ref4.theme;

  if (isDisabled) {
    return css(_templateObject8, getThemeStyle(theme[themeNamespace], 'secondaryText', 'disabled'));
  }

  return css(_templateObject9, getThemeStyle(theme[themeNamespace], 'secondaryText', 'default'), function () {
    return getThemeStyle(theme[themeNamespace], 'secondaryText', 'hover');
  }, function () {
    return getThemeStyle(theme[themeNamespace], 'secondaryText', 'active');
  });
};

var getDescriptionFontStyles = function getDescriptionFontStyles(_ref5) {
  var isCompact = _ref5.isCompact;

  var descriptionFontSize = isCompact ? compactSmallFontSize : smallFontSize;
  var lineHeight = isCompact ? compactLineHeight : 14 / descriptionFontSize;
  return css(_templateObject10, descriptionFontSize, lineHeight);
};

// Description is a block element below the children, like a subtitle
export var Description = styled.span(_templateObject11, getColorStyle, getDescriptionFontStyles);
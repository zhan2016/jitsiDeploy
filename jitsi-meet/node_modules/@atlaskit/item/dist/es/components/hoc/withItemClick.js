import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

// We currently need to keep the dropdown open if an item with `href` is clicked, to avoid the
// analytics package to track the href value without the event target disappearing. Without this
// requirement, we could just use a native click event all the way up to DropdownMenuStateless,
// and could get rid of this HOC and DropdownItemClickManager.

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import getDisplayName from '../../util/getDisplayName';
import safeContextCall from '../../util/safeContextCall';
import { clickManagerContext } from '../../util/contextNamespace';


// HOC that typically wraps @atlaskit/item
var withItemClick = function withItemClick(WrappedItem) {
  var _class, _temp2;

  return _temp2 = _class = function (_Component) {
    _inherits(WithItemClick, _Component);

    function WithItemClick() {
      var _temp, _this, _ret;

      _classCallCheck(this, WithItemClick);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.callContextFn = safeContextCall(_this, clickManagerContext), _this.shouldCloseAfterClick = function () {
        return !_this.props.isDisabled && !_this.props.href;
      }, _this.handleClick = function (event) {
        _this.props.onClick(event);
        if (_this.shouldCloseAfterClick()) {
          _this.callContextFn('itemClicked');
        }
      }, _this.handleKeyDown = function (event) {
        if (event.key === 'Space' || event.key === 'Enter') {
          _this.handleClick(event);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    WithItemClick.prototype.render = function render() {
      var _props = this.props,
          children = _props.children,
          otherProps = _objectWithoutProperties(_props, ['children']);

      return React.createElement(
        WrappedItem,
        _extends({}, otherProps, {
          onClick: this.handleClick,
          onKeyDown: this.handleKeyDown
        }),
        children
      );
    };

    return WithItemClick;
  }(Component), _class.displayName = 'WithItemClick(' + getDisplayName(WrappedItem) + ')', _class.defaultProps = {
    onClick: function onClick() {}
  }, _class.contextTypes = _defineProperty({}, clickManagerContext, PropTypes.object), _temp2;
};

export default withItemClick;
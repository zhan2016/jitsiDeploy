import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import uid from 'uid';

import getDisplayName from '../../util/getDisplayName';
import safeContextCall from '../../util/safeContextCall';
import { focusManagerContext } from '../../util/contextNamespace';


// HOC that typically wraps @atlaskit/item

var withItemFocus = function withItemFocus(WrappedComponent) {
  var _class, _temp2;

  return _temp2 = _class = function (_Component) {
    _inherits(WithItemFocus, _Component);

    function WithItemFocus() {
      var _temp, _this, _ret;

      _classCallCheck(this, WithItemFocus);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.callContextFn = safeContextCall(_this, focusManagerContext), _this.isFocusable = function () {
        return !_this.props.isDisabled && !_this.props.isHidden;
      }, _this.handleFocus = function () {
        if (_this.isFocusable()) {
          _this.callContextFn('itemFocused', _this.contextId);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    WithItemFocus.prototype.componentDidMount = function componentDidMount() {
      if (!this.isFocusable()) {
        return;
      }

      this.contextId = uid();
      // eslint-disable-next-line react/no-find-dom-node
      this.callContextFn('registerItem', this.contextId, ReactDOM.findDOMNode(this));
    };

    WithItemFocus.prototype.componentDidUpdate = function componentDidUpdate() {
      if (!this.isFocusable()) {
        return;
      }

      // eslint-disable-next-line react/no-find-dom-node
      this.callContextFn('updateItem', this.contextId, ReactDOM.findDOMNode(this));
    };

    WithItemFocus.prototype.componentWillUnmount = function componentWillUnmount() {
      if (this.isFocusable()) {
        this.callContextFn('deregisterItem', this.contextId);
      }
    };

    WithItemFocus.prototype.render = function render() {
      var _props = this.props,
          children = _props.children,
          otherProps = _objectWithoutProperties(_props, ['children']);

      return React.createElement(
        WrappedComponent,
        _extends({
          onFocus: this.handleFocus,
          role: 'menuitem'
        }, otherProps),
        children
      );
    };

    return WithItemFocus;
  }(Component), _class.displayName = 'WithItemFocus(' + getDisplayName(WrappedComponent) + ')', _class.propTypes = {
    /** Content to be displayed inside the item. Same as @atlaskit/item `children` prop. */
    children: PropTypes.node,
    /** If true, the item appears greyed out and does not fire click events. */
    isDisabled: PropTypes.bool,
    /** If true, the item is mounted but not rendered. */
    isHidden: PropTypes.bool
  }, _class.contextTypes = _defineProperty({}, focusManagerContext, PropTypes.object), _temp2;
};

export default withItemFocus;
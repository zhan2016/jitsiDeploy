import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import textContent from 'react-addons-text-content';

import { GroupTitle, GroupTitleText, GroupTitleAfter } from '../styled/ItemGroup';

var ItemGroup = function (_Component) {
  _inherits(ItemGroup, _Component);

  function ItemGroup() {
    _classCallCheck(this, ItemGroup);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  // eslint-disable-line react/sort-comp

  ItemGroup.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        elemAfter = _props.elemAfter,
        isCompact = _props.isCompact,
        title = _props.title,
        label = _props.label,
        innerRef = _props.innerRef,
        role = _props.role;


    var ariaLabel = function () {
      if (label) {
        return textContent(label);
      }
      if (title) {
        return textContent(title);
      }
      return '';
    }();
    return React.createElement(
      'div',
      { 'aria-label': ariaLabel, role: role, ref: innerRef },
      title ? React.createElement(
        GroupTitle,
        { 'aria-hidden': 'true', isCompact: isCompact },
        React.createElement(
          GroupTitleText,
          null,
          title
        ),
        elemAfter ? React.createElement(
          GroupTitleAfter,
          { innerRef: function innerRef(r) {
              return _this2.headingAfterElement = r;
            } },
          elemAfter
        ) : null
      ) : null,
      children
    );
  };

  return ItemGroup;
}(Component);

ItemGroup.propTypes = {
  /** Items to be shown inside the item group. */
  children: PropTypes.node,
  /** Causes the group title to be rendered with reduced spacing. */
  isCompact: PropTypes.bool,
  /** Optional heading text to be shown above the items. */
  title: PropTypes.node,
  /** Content to be shown to the right of the heading */
  elemAfter: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
  /** A function that returns the DOM ref created by the group */
  innerRef: PropTypes.func,
  /** Accessibility role to be applied to the root component */
  role: PropTypes.string,
  /** Accessibility label - if not provided the title will be used if available */
  label: PropTypes.node
};
ItemGroup.defaultProps = {
  role: 'group'
};
export default ItemGroup;
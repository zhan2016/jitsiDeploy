import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { akColorB400, akColorN40 } from '@atlaskit/util-shared-styles';

import SelectionIconSpacer from '../../styled/SelectionIconSpacer';
import getDisplayName from '../../util/getDisplayName';
import safeContextCall from '../../util/safeContextCall';
import { selectionManagerContext } from '../../util/contextNamespace';


import { KEY_ENTER, KEY_SPACE } from '../../util/keys';

// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function withToggleInteraction(WrappedComponent, SelectionIcon, ariaRole) {
  var WithToggleInteraction = function (_Component) {
    _inherits(WithToggleInteraction, _Component);

    function WithToggleInteraction() {
      var _temp, _this, _ret;

      _classCallCheck(this, WithToggleInteraction);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getIconColors = function () {
        var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (isSelected) {
          return { primary: akColorB400, secondary: akColorN40 };
        }
        return { primary: akColorN40, secondary: akColorN40 };
      }, _this.warnIfUseControlledAndUncontrolledState = function () {
        if (process.env.NODE_ENV !== 'production') {
          if (_this.props.defaultSelected && _this.props.isSelected) {
            // eslint-disable-next-line no-console
            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
          }
        }
      }, _this.callContextFn = safeContextCall(_this, selectionManagerContext), _this.handleKeyboard = function (event) {
        var key = event.key;

        if (key === KEY_ENTER || key === KEY_SPACE) {
          // We prevent default here to avoid page scroll
          event.preventDefault();

          _this.handleItemActivated(event);
        }
      }, _this.handleItemActivated = function (event) {
        _this.props.onClick(event);
        _this.callContextFn('itemClicked', _this.props.id);
      }, _this.isSelectedInDropdown = function () {
        return _this.callContextFn('isItemSelected', _this.props.id);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    WithToggleInteraction.prototype.componentDidMount = function componentDidMount() {
      var _props = this.props,
          defaultSelected = _props.defaultSelected,
          isSelected = _props.isSelected,
          id = _props.id;

      this.warnIfUseControlledAndUncontrolledState();

      this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
    };

    WithToggleInteraction.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var id = nextProps.id,
          defaultSelected = nextProps.defaultSelected,
          isSelected = nextProps.isSelected;

      if (this.props.isSelected !== isSelected) {
        this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
      }
    };

    WithToggleInteraction.prototype.render = function render() {
      var _props2 = this.props,
          children = _props2.children,
          otherProps = _objectWithoutProperties(_props2, ['children']);

      var isSelected = this.isSelectedInDropdown();
      var iconColors = this.getIconColors(isSelected);

      return React.createElement(
        WrappedComponent,
        _extends({}, otherProps, {
          role: ariaRole,
          'aria-checked': isSelected,
          isSelected: isSelected,
          onClick: this.handleItemActivated,
          onKeyDown: this.handleKeyboard,
          elemBefore: React.createElement(
            SelectionIconSpacer,
            null,
            React.createElement(SelectionIcon, {
              primaryColor: iconColors.primary,
              secondaryColor: iconColors.secondary,
              size: 'medium',
              label: ''
            })
          )
        }),
        children
      );
    };

    return WithToggleInteraction;
  }(Component);

  WithToggleInteraction.propTypes = {
    /** Content to be displayed inside the item. Same as @atlaskit/item `children` prop. */
    children: PropTypes.node,
    /** Unique identifier for the item, so that selection state can be tracked when the dropdown
      * is opened/closed. */
    id: PropTypes.string.isRequired,
    /** Set at mount to make the item appear checked. The user may interact with the
     * item after mount. See isSelected if you want to control the item state manually. */
    defaultSelected: PropTypes.bool,
    /** Causes the item to appear visually checked. Can be set at mount time, and updated after
      * mount. Changing the value will not cause onClick to be called. */
    isSelected: PropTypes.bool,
    /** Standard optional onClick handler */
    onClick: PropTypes.func
  };
  WithToggleInteraction.defaultProps = {
    onClick: function onClick() {}
  };
  WithToggleInteraction.contextTypes = _defineProperty({}, selectionManagerContext, PropTypes.object.isRequired);

  WithToggleInteraction.displayName = 'WithToggleInteraction(' + getDisplayName(WrappedComponent) + ')';
  return WithToggleInteraction;
};

export default withToggleInteraction;
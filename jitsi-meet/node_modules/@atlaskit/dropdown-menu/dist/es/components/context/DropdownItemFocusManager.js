import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { focusManagerContext } from '../../util/contextNamespace';

import { KEY_DOWN, KEY_UP } from '../../util/keys';

var DropdownItemFocusManager = function (_Component) {
  _inherits(DropdownItemFocusManager, _Component);

  function DropdownItemFocusManager() {
    var _temp, _this, _ret;

    _classCallCheck(this, DropdownItemFocusManager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.registeredItems = [], _this.handleItemRegistered = function (itemId, itemNode) {
      _this.registeredItems.push({ itemId: itemId, itemNode: itemNode });

      if (_this.props.autoFocus && _this.registeredItems.length === 1) {
        _this.focusedItemId = itemId;
        itemNode.focus();
      }
    }, _this.handleItemDeregistered = function (itemId) {
      _this.registeredItems = _this.registeredItems.filter(function (item) {
        return item.itemId !== itemId;
      });
    }, _this.handleItemFocused = function (itemId) {
      _this.focusedItemId = itemId;
    }, _this.handleItemUpdated = function (itemId, itemNode) {
      var matchingIndex = -1;
      for (var i = 0; i < _this.registeredItems.length; i++) {
        if (_this.registeredItems[i].itemId === itemId) {
          matchingIndex = i;
          break;
        }
      }

      if (matchingIndex === -1) {
        _this.handleItemRegistered(itemId, itemNode);
        return;
      }

      _this.registeredItems[matchingIndex].itemNode = itemNode;
      if (_this.focusedItemIndex() === matchingIndex) {
        itemNode.focus();
      }
    }, _this.focusedItemIndex = function () {
      var _this2 = _this,
          focusedItemId = _this2.focusedItemId,
          registeredItems = _this2.registeredItems;

      for (var i = 0; i < registeredItems.length; i++) {
        if (registeredItems[i].itemId === focusedItemId) {
          return i;
        }
      }
      return -1;
    }, _this.handleKeyboard = function (event) {
      var key = event.key;

      if (key === KEY_UP || key === KEY_DOWN) {
        // We prevent default here to avoid page scrolling when up/down
        // pressed while dropdown is focused.
        event.preventDefault();

        var focusedItemIndex = _this.focusedItemIndex();
        if (focusedItemIndex < 0) {
          return;
        }

        var nextItemIndex = key === KEY_UP ? Math.max(0, focusedItemIndex - 1) : Math.min(_this.registeredItems.length - 1, focusedItemIndex + 1);
        _this.registeredItems[nextItemIndex].itemNode.focus();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  DropdownItemFocusManager.prototype.getChildContext = function getChildContext() {
    return _defineProperty({}, focusManagerContext, {
      itemFocused: this.handleItemFocused,
      registerItem: this.handleItemRegistered,
      deregisterItem: this.handleItemDeregistered,
      updateItem: this.handleItemUpdated
    });
  };

  DropdownItemFocusManager.prototype.render = function render() {
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    return React.createElement(
      'div',
      { onKeyDown: this.handleKeyboard },
      this.props.children
    );
  };

  return DropdownItemFocusManager;
}(Component);

DropdownItemFocusManager.propTypes = {
  /** Causes first registered item to receive focus */
  autoFocus: PropTypes.bool,
  children: PropTypes.node
};
DropdownItemFocusManager.childContextTypes = _defineProperty({}, focusManagerContext, PropTypes.object);
export default DropdownItemFocusManager;
import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _all from 'prop-types-extra/lib/all';
import _PropTypes from 'prop-types';
import React, { Component } from 'react';
import DropdownMenu from '@atlaskit/dropdown-menu';
import Avatar from './Avatar';
import { Grid, Stack } from '../styled/AvatarGroup';
import MoreIndicator from '../components/MoreIndicator';


var GROUP_COMPONENT = {
  grid: Grid,
  stack: Stack
};
var MAX_COUNT = {
  grid: 11,
  stack: 5
};

var AvatarGroup = function (_Component) {
  _inherits(AvatarGroup, _Component);

  function AvatarGroup() {
    _classCallCheck(this, AvatarGroup);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  // eslint-disable-line react/sort-comp

  AvatarGroup.prototype.renderMoreDropdown = function renderMoreDropdown(max, total) {
    var _props = this.props,
        appearance = _props.appearance,
        data = _props.data,
        borderColor = _props.borderColor,
        onMoreClick = _props.onMoreClick,
        onAvatarClick = _props.onAvatarClick,
        size = _props.size;

    // bail if there's not enough items

    if (total <= max) return null;

    // prepare the button -- we'll use it twice
    var MoreButton = function MoreButton(props) {
      return React.createElement(MoreIndicator, _extends({
        borderColor: borderColor,
        count: total - max,
        isInteractive: true,
        isStack: appearance === 'stack',
        size: size
      }, props));
    };

    // bail if the consumer wants to handle onClick
    if (typeof onMoreClick === 'function') {
      return React.createElement(MoreButton, { onClick: onMoreClick });
    }

    // crop and prepare the dropdown items
    var items = data.slice(max).map(function (avatar) {
      return {
        content: avatar.name,
        elemBefore: React.createElement(Avatar, _extends({}, avatar, { size: 'small', borderColor: 'transparent' })),
        href: avatar.href,
        rel: avatar.target ? 'noopener noreferrer' : null,
        target: avatar.target
      };
    });

    return React.createElement(
      DropdownMenu,
      { items: [{ items: items }], onItemActivated: onAvatarClick, position: 'bottom right' },
      React.createElement(MoreButton, null)
    );
  };

  AvatarGroup.prototype.render = function render() {
    var _props2 = this.props,
        Item = _props2.avatar,
        appearance = _props2.appearance,
        borderColor = _props2.borderColor,
        data = _props2.data,
        maxCount = _props2.maxCount,
        onAvatarClick = _props2.onAvatarClick,
        size = _props2.size;
    // NOTE: conditionally defaulting the `maxCount` prop based on `appearance`

    var max = maxCount === 0 ? MAX_COUNT[appearance] : maxCount;
    var total = data.length;
    var Group = GROUP_COMPONENT[appearance];

    // Render (max - 1) avatars to leave space for moreIndicator
    var maxAvatar = total > max ? max - 1 : max;

    var items = data.slice(0, maxAvatar).map(function (avatar, idx) {
      return React.createElement(Item, _extends({}, avatar, {
        borderColor: borderColor,
        groupAppearance: appearance,
        index: idx,
        key: idx,
        onClick: avatar.onClick || onAvatarClick,
        size: size,
        stackIndex: max - idx
      }));
    });

    return React.createElement(
      Group,
      { size: size },
      items,
      this.renderMoreDropdown(+maxAvatar, total)
    );
  };

  return AvatarGroup;
}(Component);

AvatarGroup.propTypes = {
  /** Indicates the shape of the avatar. Most avatars are circular, but square avatars
  can be used for 'container' objects. */
  appearance: _PropTypes.oneOf(['grid', 'stack']).isRequired /** Component used to render each avatar */
  ,
  avatar: _PropTypes.any.isRequired /** Typically the background color that the avatar is presented on.
                                    Accepts any color argument that the CSS border-color property accepts. */
  ,
  borderColor: _PropTypes.string /** Array of avatar data passed to each `avatar` component */
  ,
  data: _PropTypes.arrayOf(_all(_PropTypes.shape({
    /** Indicates the shape of the avatar. Most avatars are circular, but square avatars
    can be used for 'container' objects. */appearance: _PropTypes.oneOf(['circle', 'square']) /** Used to override the default border color of the presence indicator.
                                                                                              Accepts any color argument that the border-color CSS property accepts. */,
    borderColor: _PropTypes.string /** A custom component to use instead of the default span. */,
    component: _PropTypes.any /** Display a tooltip on hover */,
    enableTooltip: _PropTypes.bool /** Provides a url for avatars being used as a link. */
    ,
    href: _PropTypes.string /** Change the style to indicate the avatar is active. */,
    isActive: _PropTypes.bool /** Change the style to indicate the avatar is disabled. */,
    isDisabled: _PropTypes.bool /** Change the style to indicate the avatar is focused. */,
    isFocus: _PropTypes.bool /** Change the style to indicate the avatar is hovered. */,
    isHover: _PropTypes.bool /** Change the style to indicate the avatar is selected. */,
    isSelected: _PropTypes.bool /** Name will be displayed in a tooltip, also used by screen readers as fallback
                                content if the image fails to load. */,
    name: _PropTypes.string /** Indicates a user's online status by showing a small icon on the avatar.
                            Refer to presence values on the Presence component.
                            Alternatively accepts any React element. For best results, it is recommended to
                            use square content with height and width of 100%. */,
    presence: _PropTypes.oneOfType([_PropTypes.oneOf(['online', 'busy', 'offline']), _PropTypes.any]) /** Defines the size of the avatar */,
    size: _PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']).isRequired /** A url to load an image from (this can also be a base64 encoded image). */,
    src: _PropTypes.string /** Indicates contextual information by showing a small icon on the avatar.
                           Refer to status values on the Status component. */,
    status: _PropTypes.oneOf(['approved', 'declined', 'locked']) /** The index of where this avatar is in the group `stack`. */,
    stackIndex: _PropTypes.number /** Assign specific tabIndex order to the underlying node. */,
    tabIndex: _PropTypes.number /** Pass target down to the anchor, if href is provided. */,
    target: _PropTypes.oneOf(['_blank', '_self'])
  }), _PropTypes.shape({
    /** Handler to be called on click. */onClick: _PropTypes.func
  }))).isRequired /** The maximum number of avatars allowed in the grid */
  ,
  maxCount: _PropTypes.number.isRequired /** Handle the click event on the avatar item */
  ,
  onAvatarClick: _PropTypes.func /** Take control of the click event on the more indicator. This will cancel
                                 the default dropdown behaviour. */
  ,
  onMoreClick: _PropTypes.func /** Defines the size of the avatar */
  ,
  size: _PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge'])
};
AvatarGroup.defaultProps = { appearance: 'stack',
  avatar: Avatar,
  maxCount: 0,
  size: 'medium'
};
export default AvatarGroup;
import _extends from 'babel-runtime/helpers/extends';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';
import React, { cloneElement, Component } from 'react';

import { propsOmittedFromClickData } from './constants';
import { omit } from '../utils';
import { getBackgroundColor, getStyles, Content, PrimaryText, SecondaryText } from '../styled/AvatarItem';
import { getProps, getStyledComponent } from '../helpers';
import { withPseudoState } from '../hoc';

/* eslint-disable react/no-unused-prop-types */

var AvatarItem = function (_Component) {
  _inherits(AvatarItem, _Component);

  function AvatarItem() {
    var _temp, _this, _ret;

    _classCallCheck(this, AvatarItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.cache = {}, _this.blur = function (e) {
      if (_this.node.blur) _this.node.blur(e);
    }, _this.focus = function (e) {
      if (_this.node.focus) _this.node.focus(e);
    }, _this.guardedClick = function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onClick = _this$props.onClick;


      if (isDisabled || typeof onClick !== 'function') return;

      var item = omit.apply(undefined, [_this.props].concat(_toConsumableArray(propsOmittedFromClickData)));

      onClick({ item: item, event: event });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp


  AvatarItem.prototype.getCachedComponent = function getCachedComponent(type) {
    if (!this.cache[type]) {
      this.cache[type] = getStyledComponent[type](getStyles);
    }
    return this.cache[type];
  };

  AvatarItem.prototype.getStyledComponent = function getStyledComponent() {
    var _props = this.props,
        component = _props.component,
        href = _props.href,
        onClick = _props.onClick;

    var node = 'span';

    if (component) node = 'custom';else if (href) node = 'link';else if (onClick) node = 'button';

    return this.getCachedComponent(node);
  };

  // expose blur/focus to consumers via ref


  // disallow click on disabled avatars


  AvatarItem.prototype.render = function render() {
    var _this2 = this;

    var _props2 = this.props,
        avatar = _props2.avatar,
        enableTextTruncate = _props2.enableTextTruncate,
        onClick = _props2.onClick,
        primaryText = _props2.primaryText,
        secondaryText = _props2.secondaryText;

    // maintain the illusion of a mask around presence/status

    var borderColor = getBackgroundColor(this.props);

    // distill props from context, props, and state
    var props = getProps(this);

    // provide element type based on props
    var Item = this.getStyledComponent();

    // augment the onClick handler
    props.onClick = onClick && this.guardedClick;

    return React.createElement(
      Item,
      _extends({ innerRef: function innerRef(r) {
          return _this2.node = r;
        } }, props),
      cloneElement(avatar, { borderColor: borderColor }),
      React.createElement(
        Content,
        { truncate: enableTextTruncate },
        React.createElement(
          PrimaryText,
          { truncate: enableTextTruncate },
          primaryText
        ),
        React.createElement(
          SecondaryText,
          { truncate: enableTextTruncate },
          secondaryText
        )
      )
    );
  };

  return AvatarItem;
}(Component);

AvatarItem.propTypes = /* eslint-disable react/no-unused-prop-types */{
  avatar: _PropTypes.any.isRequired /** A custom component to use instead of the default span. */
  ,
  component: _PropTypes.any /** Provides a url for avatars being used as a link. */
  ,
  href: _PropTypes.string /** Change the style to indicate the item is active. */
  ,
  isActive: _PropTypes.bool /** Change the style to indicate the item is disabled. */
  ,
  isDisabled: _PropTypes.bool /** Change the style to indicate the item is focused. */
  ,
  isFocus: _PropTypes.bool /** Change the style to indicate the item is hovered. */
  ,
  isHover: _PropTypes.bool /** Change the style to indicate the item is selected. */
  ,
  isSelected: _PropTypes.bool /** Handler to be called on click. */
  ,
  onClick: _PropTypes.func /** PrimaryText text */
  ,
  primaryText: _PropTypes.string /** SecondaryText text */
  ,
  secondaryText: _PropTypes.string /** Pass target down to the anchor, if href is provided. */
  ,
  target: _PropTypes.oneOf(['_blank', '_self']) /** Whether or not overflowing primary and secondary text is truncated */
  ,
  enableTextTruncate: _PropTypes.bool
};
AvatarItem.defaultProps = { enableTextTruncate: true };


export default withPseudoState(AvatarItem);
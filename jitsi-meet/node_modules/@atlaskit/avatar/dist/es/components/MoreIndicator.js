import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _PropTypes from 'prop-types';

/* eslint-disable react/no-unused-prop-types, react/prop-types, react/sort-comp */

import React, { Component } from 'react';
import { Outer, Inner } from '../styled/MoreIndicator';
import { withPseudoState } from '../hoc';
import { getProps } from '../helpers';


var MAX_DISPLAY_COUNT = 99;

var MoreIndicator = function (_Component) {
  _inherits(MoreIndicator, _Component);

  function MoreIndicator() {
    _classCallCheck(this, MoreIndicator);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  MoreIndicator.prototype.render = function render() {
    var count = this.props.count;

    var outerProps = getProps(this);
    var _props = this.props,
        appearance = _props.appearance,
        isActive = _props.isActive,
        isFocus = _props.isFocus,
        isHover = _props.isHover,
        size = _props.size;


    var innerProps = { appearance: appearance, isActive: isActive, isFocus: isFocus, isHover: isHover, size: size };
    var displayCount = count > MAX_DISPLAY_COUNT ? MAX_DISPLAY_COUNT : count;

    return React.createElement(
      Outer,
      _extends({}, outerProps, { isInteractive: true }),
      React.createElement(
        Inner,
        innerProps,
        '+',
        displayCount
      )
    );
  };

  return MoreIndicator;
}(Component);

MoreIndicator.propTypes = {
  /** Used to override the default border color of the presence indicator.
  Accepts any color argument that the border-color CSS property accepts. */
  borderColor: _PropTypes.string /** The total number excess of avatars */
  ,
  count: _PropTypes.number.isRequired /** When true, provides a gutter for the adjacent avatar */
  ,
  isStack: _PropTypes.bool /** Handle user interaction */
  ,
  onClick: _PropTypes.func /** Defines the size of the indicator */
  ,
  size: _PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']) /** TODO */
  ,
  appearance: _PropTypes.string,
  isActive: _PropTypes.bool,
  isFocus: _PropTypes.bool,
  isHover: _PropTypes.bool
};
MoreIndicator.defaultProps = {
  appearance: 'circle'
};


export default withPseudoState(MoreIndicator);
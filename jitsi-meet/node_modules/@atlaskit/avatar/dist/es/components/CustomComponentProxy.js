import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import React from 'react';

/**
 * Styling a avatar is complicated and there are a number of properties which
 * inform its appearance. We want to be able to style any arbitrary component
 * like a Link, but we don't want to pass all of these appearance-related props
 * through to the component or underlying DOM node. This component acts as a
 * layer which catches the appearance-related properties so that they can be
 * used by styled-components, then passes the rest of the props on to the custom
 * component.
 */

/* eslint-disable react/prop-types, no-unused-vars */
export default function CustomComponentProxy(_ref) {
  var appearance = _ref.appearance,
      avatar = _ref.avatar,
      borderColor = _ref.borderColor,
      ProxiedComponent = _ref.component,
      enableTooltip = _ref.enableTooltip,
      groupAppearance = _ref.groupAppearance,
      innerRef = _ref.innerRef,
      isActive = _ref.isActive,
      isDisabled = _ref.isDisabled,
      isFocus = _ref.isFocus,
      isHover = _ref.isHover,
      isSelected = _ref.isSelected,
      primaryText = _ref.primaryText,
      secondaryText = _ref.secondaryText,
      stackIndex = _ref.stackIndex,
      props = _objectWithoutProperties(_ref, ['appearance', 'avatar', 'borderColor', 'component', 'enableTooltip', 'groupAppearance', 'innerRef', 'isActive', 'isDisabled', 'isFocus', 'isHover', 'isSelected', 'primaryText', 'secondaryText', 'stackIndex']);

  return React.createElement(ProxiedComponent, props);
}
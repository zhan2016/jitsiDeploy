import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import { omit, getDisplayName } from '../utils';

/* eslint-disable react/no-unused-prop-types */

/* eslint-enable react/no-unused-prop-types */

var INTERNAL_HANDLERS = ['onBlur', 'onFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseUp'];

function getInitialState(_ref) {
  var href = _ref.href,
      isActive = _ref.isActive,
      isFocus = _ref.isFocus,
      isHover = _ref.isHover,
      isInteractive = _ref.isInteractive,
      onClick = _ref.onClick;

  return {
    isActive: isActive,
    isFocus: isFocus,
    isHover: isHover,
    isInteractive: !!(href || isInteractive || onClick)
  };
}

export default function withPseudoState(WrappedComponent) {
  var _class, _temp2, _initialiseProps;

  return _temp2 = _class = function (_Component) {
    _inherits(ComponentWithPseudoState, _Component);

    function ComponentWithPseudoState() {
      var _temp, _this, _ret;

      _classCallCheck(this, ComponentWithPseudoState);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
    }

    ComponentWithPseudoState.prototype.componentWillMount = function componentWillMount() {
      var _props = this.props,
          href = _props.href,
          isInteractive = _props.isInteractive,
          onClick = _props.onClick;


      if (href || isInteractive || onClick) {
        this.actionKeys = onClick || isInteractive ? ['Enter', ' '] : ['Enter'];
      }
    };

    // expose blur/focus to consumers via ref


    ComponentWithPseudoState.prototype.render = function render() {
      var _this2 = this;

      var props = this.getProps();

      return React.createElement(WrappedComponent, _extends({
        ref: function ref(r) {
          return _this2.component = r;
        }
      }, this.state, props));
    };

    return ComponentWithPseudoState;
  }(Component), _class.displayName = getDisplayName('withPseudoState', WrappedComponent), _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.state = getInitialState(this.props);

    this.blur = function (e) {
      if (_this3.component.blur) _this3.component.blur(e);
    };

    this.focus = function (e) {
      if (_this3.component.focus) _this3.component.focus(e);
    };

    this.onBlur = function () {
      return _this3.setState({ isActive: false, isFocus: false });
    };

    this.onFocus = function () {
      return _this3.setState({ isFocus: true });
    };

    this.onMouseLeave = function () {
      return _this3.setState({ isActive: false, isHover: false });
    };

    this.onMouseEnter = function () {
      return _this3.setState({ isHover: true });
    };

    this.onMouseUp = function () {
      return _this3.setState({ isActive: false });
    };

    this.onMouseDown = function () {
      return _this3.setState({ isActive: true });
    };

    this.onKeyDown = function (event) {
      if (_this3.actionKeys.includes(event.key)) {
        _this3.setState({ isActive: true });
      }
    };

    this.onKeyUp = function (event) {
      if (_this3.actionKeys.includes(event.key)) {
        _this3.setState({ isActive: false });
      }
    };

    this.getProps = function () {
      var isInteractive = _this3.state.isInteractive;

      // strip the consumer's handlers off props, then merge with our handlers
      // if the element is interactive

      var props = omit.apply(undefined, [_this3.props].concat(INTERNAL_HANDLERS));

      var self = _this3;

      if (isInteractive) {
        INTERNAL_HANDLERS.forEach(function (handler) {
          if (_this3.props[handler]) {
            props[handler] = function () {
              var _props2;

              self[handler].apply(self, arguments);
              (_props2 = _this3.props)[handler].apply(_props2, arguments);
            };
          } else {
            props[handler] = self[handler];
          }
        });
      }

      return props;
    };
  }, _temp2;
}
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n    align-items: center;\n    background-color: ', ';\n    border-radius: ', 'px;\n    border: 2px solid ', ';\n    box-sizing: content-box;\n    color: inherit;\n    cursor: ', ';\n    display: flex;\n    font-size: inherit;\n    font-style: normal;\n    font-weight: normal;\n    line-height: 1;\n    opacity: ', ';\n    outline: ', ';\n    margin: 0;\n    padding: ', 'px;\n    pointer-events: ', ';\n    text-align: left;\n    text-decoration: none;\n    width: 100%;\n  '], ['\n    align-items: center;\n    background-color: ', ';\n    border-radius: ', 'px;\n    border: 2px solid ', ';\n    box-sizing: content-box;\n    color: inherit;\n    cursor: ', ';\n    display: flex;\n    font-size: inherit;\n    font-style: normal;\n    font-weight: normal;\n    line-height: 1;\n    opacity: ', ';\n    outline: ', ';\n    margin: 0;\n    padding: ', 'px;\n    pointer-events: ', ';\n    text-align: left;\n    text-decoration: none;\n    width: 100%;\n  ']),
    _templateObject2 = _taggedTemplateLiteral(['\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n'], ['\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n']),
    _templateObject3 = _taggedTemplateLiteral(['\n  max-width: 100%;\n  min-width: 0;\n'], ['\n  max-width: 100%;\n  min-width: 0;\n']),
    _templateObject4 = _taggedTemplateLiteral(['\n  ', '\n  flex: 1;\n  line-height: 1.4;\n  padding-left: ', 'px;\n'], ['\n  ', '\n  flex: 1;\n  line-height: 1.4;\n  padding-left: ', 'px;\n']),
    _templateObject5 = _taggedTemplateLiteral(['\n  ', '\n  color: ', ';\n'], ['\n  ', '\n  color: ', ';\n']),
    _templateObject6 = _taggedTemplateLiteral(['\n  ', '\n  color: ', ';\n  font-size: 0.85em;\n'], ['\n  ', '\n  color: ', ';\n  font-size: 0.85em;\n']);

import styled, { css } from 'styled-components';
import { borderRadius, colors, gridSize, math, themed } from '@atlaskit/theme';

var activeBackgroundColor = themed({
  light: colors.B50,
  dark: colors.DN40
});
var hoverBackgroundColor = themed({
  light: colors.N30,
  dark: colors.DN50
});
var focusBorderColor = themed({
  light: colors.B200,
  dark: colors.B75
});

export function getBackgroundColor(_ref) {
  var href = _ref.href,
      isActive = _ref.isActive,
      isHover = _ref.isHover,
      isSelected = _ref.isSelected,
      onClick = _ref.onClick;

  var isInteractive = href || onClick;

  var backgroundColor = colors.background;

  // Interaction: Hover
  if (isInteractive && (isHover || isSelected)) {
    backgroundColor = hoverBackgroundColor;
  }

  // Interaction: Active
  if (isInteractive && isActive) {
    backgroundColor = activeBackgroundColor;
  }

  return backgroundColor;
}

export function getStyles(_ref2) {
  var href = _ref2.href,
      isActive = _ref2.isActive,
      isDisabled = _ref2.isDisabled,
      isFocus = _ref2.isFocus,
      onClick = _ref2.onClick;

  var isInteractive = href || onClick;

  var borderColor = 'transparent';
  var cursor = 'auto';
  var opacity = 1;
  var outline = 'none';
  var pointerEvents = 'auto';

  // Interaction: Focus
  if (isInteractive && isFocus && !isActive) {
    outline = 'none';
    borderColor = focusBorderColor;
  }

  // Disabled
  if (isDisabled) {
    cursor = 'not-allowed';
    opacity = 0.75;
    pointerEvents = 'none';
  }

  // Interactive
  if (isInteractive) {
    cursor = 'pointer';
  }
  return css(_templateObject, getBackgroundColor, borderRadius, borderColor, cursor, opacity, outline, math.divide(gridSize, 2), pointerEvents);
}

var truncateText = function truncateText(p) {
  return p.truncate && css(_templateObject2);
};
var truncateTextFlexParent = function truncateTextFlexParent(p) {
  return p.truncate && css(_templateObject3);
};

export var Content = styled.div(_templateObject4, truncateTextFlexParent, gridSize);
export var PrimaryText = styled.div(_templateObject5, truncateText, colors.text);
export var SecondaryText = styled.div(_templateObject6, truncateText, colors.subtleText);
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['&,&:hover,&:active,&:focus{', '}'], ['&,&:hover,&:active,&:focus{', '}']),
    _templateObject2 = _taggedTemplateLiteral(['', ''], ['', '']),
    _templateObject3 = _taggedTemplateLiteral(['a&{ ', ' }'], ['a&{ ', ' }']);

import styled from 'styled-components';
import CustomComponentProxy from '../components/CustomComponentProxy';

export default {
  custom: function custom(styles) {
    // Override pseudo-state specificity.
    // This is necessary because we don't know what DOM element the custom component will render.
    var component = styled(CustomComponentProxy)(_templateObject, styles);
    component.displayName = 'StyledCustomComponent';
    return component;
  },
  button: function button(styles) {
    var component = styled.button(_templateObject2, styles);
    component.displayName = 'StyledButton';
    return component;
  },
  link: function link(styles) {
    // Target the <a> here to override a:hover specificity.
    var component = styled.a(_templateObject3, styles);
    component.displayName = 'StyledLink';
    return component;
  },
  span: function span(styles) {
    var component = styled.span(_templateObject2, styles);
    component.displayName = 'StyledSpan';
    return component;
  }
};
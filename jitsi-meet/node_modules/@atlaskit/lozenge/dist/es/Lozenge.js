import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import Container from './styled/Container';
import Content from './styled/Content';

export var APPEARANCE_ENUM = {
  values: ['default', 'success', 'removed', 'inprogress', 'new', 'moved'],
  defaultValue: 'default'
};

var Lozenge = function (_PureComponent) {
  _inherits(Lozenge, _PureComponent);

  function Lozenge() {
    _classCallCheck(this, Lozenge);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  // returns the assigned appearance if valid, falling back to the default otherwise
  Lozenge.prototype.validAppearance = function validAppearance() {
    var appearance = this.props.appearance;
    var values = APPEARANCE_ENUM.values,
        defaultValue = APPEARANCE_ENUM.defaultValue;

    return values.indexOf(appearance) !== -1 ? appearance : defaultValue;
  };

  Lozenge.prototype.render = function render() {
    var _props = this.props,
        isBold = _props.isBold,
        children = _props.children;


    return React.createElement(
      Container,
      { appearance: this.validAppearance(), isBold: isBold },
      React.createElement(
        Content,
        null,
        children
      )
    );
  };

  return Lozenge;
}(PureComponent);

Lozenge.propTypes = {
  /** Determines whether to apply the bold style or not. */
  isBold: PropTypes.bool,
  /** The appearance type. */
  appearance: PropTypes.oneOf(APPEARANCE_ENUM.values),
  /** Elements to be rendered inside the lozenge. This should ideally be just
  a word or two. */
  children: PropTypes.node
};
Lozenge.defaultProps = {
  isBold: false,
  appearance: APPEARANCE_ENUM.defaultValue
};
export default Lozenge;
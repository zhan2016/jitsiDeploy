import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  background-color: ', ';\n  border-radius: ', ';\n  box-sizing: border-box;\n  color: ', ';\n  display: inline-flex;\n  font-size: 11px;\n  font-weight: 700;\n  line-height: 1;\n  max-width: 200px;\n  padding: 2px ', ' 3px ', ';\n  text-transform: uppercase;\n  vertical-align: baseline;\n  white-space: nowrap;\n'], ['\n  background-color: ', ';\n  border-radius: ', ';\n  box-sizing: border-box;\n  color: ', ';\n  display: inline-flex;\n  font-size: 11px;\n  font-weight: 700;\n  line-height: 1;\n  max-width: 200px;\n  padding: 2px ', ' 3px ', ';\n  text-transform: uppercase;\n  vertical-align: baseline;\n  white-space: nowrap;\n']);

import styled from 'styled-components';
import { akBorderRadius, akColorB50, akColorB500, akColorG50, akColorG500, akColorN0, akColorN20, akColorN40, akColorN500, akColorN600, akColorN700, akColorP50, akColorP500, akColorR50, akColorR500, akColorY50, akColorY500, akGridSizeUnitless } from '@atlaskit/util-shared-styles';

var HORIZONTAL_SPACING = akGridSizeUnitless / 2 + 'px';

var backgroundColor = {
  default: akColorN20,
  inprogress: akColorB50,
  moved: akColorY50,
  new: akColorP50,
  removed: akColorR50,
  success: akColorG50
};
var textColor = {
  default: akColorN500,
  inprogress: akColorB500,
  moved: akColorN600,
  new: akColorP500,
  removed: akColorR500,
  success: akColorG500
};

var boldBackgroundColor = {
  default: akColorN40,
  inprogress: akColorB500,
  moved: akColorY500,
  new: akColorP500,
  removed: akColorR500,
  success: akColorG500
};
var boldTextColor = {
  default: akColorN700,
  inprogress: akColorN0,
  moved: akColorN600,
  new: akColorN0,
  removed: akColorN0,
  success: akColorN0
};

var getBackgroundColor = function getBackgroundColor(_ref) {
  var appearance = _ref.appearance,
      isBold = _ref.isBold;
  return isBold ? boldBackgroundColor[appearance] : backgroundColor[appearance];
};
var getTextColor = function getTextColor(_ref2) {
  var appearance = _ref2.appearance,
      isBold = _ref2.isBold;
  return isBold ? boldTextColor[appearance] : textColor[appearance];
};

export default styled.span(_templateObject, getBackgroundColor, akBorderRadius, getTextColor, HORIZONTAL_SPACING, HORIZONTAL_SPACING);